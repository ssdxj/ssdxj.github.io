<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>projection</title>
      <link href="/2025/01/07/projection/"/>
      <url>/2025/01/07/projection/</url>
      
        <content type="html"><![CDATA[<h2><span id="mo-qia-tuo-tou-ying-mercator-projection-shi-yi-chong-yuan-zhu-tou-ying"> 墨卡托投影（Mercator Projection）是一种圆柱投影</span><a href="#mo-qia-tuo-tou-ying-mercator-projection-shi-yi-chong-yuan-zhu-tou-ying" class="header-anchor">#</a></h2><h3><span id="yuan-li"> 原理</span><a href="#yuan-li" class="header-anchor">#</a></h3><ul><li>墨卡托投影将地球的经纬网投影到一个圆柱面上。</li><li>圆柱切于赤道，赤道为投影的标准线。</li><li>投影中保持了<ul><li>经线和纬线互相垂直，</li><li>经线等距排列，</li><li>纬线间距随纬度增大而增加。</li></ul></li></ul><h3><span id="te-dian"> 特点</span><a href="#te-dian" class="header-anchor">#</a></h3><ul><li><p>等角特性（角度保持性）: 墨卡托投影是一种正形投影，即在投影后，角度关系保持不变。</p></li><li><p>面积失真: 纬度越高，投影的面积失真越大。高纬地区的面积被显著放大，例如，格陵兰岛在墨卡托投影中看起来与非洲大陆差不多大，但实际面积远小于非洲。</p></li><li><p>方向正确: 任意两点之间的直线（恒向线）表示恒定方向，方便导航，但不代表两点间最短距离（大圆航线）。</p></li><li><p>优点</p><ol><li>保持角度精确，方便航线规划。</li><li>经纬网呈直线，便于制图。</li></ol></li><li><p>缺点</p><ol><li>高纬地区严重失真，无法正确反映面积大小。</li><li>不适合表示全球地理分布。</li></ol></li></ul><h3><span id="gong-shi"> 公式</span><a href="#gong-shi" class="header-anchor">#</a></h3><p>R为地球半径，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>λ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为经度零点（以弧度表示），<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>为纬度（以弧度表示）。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mi>R</mi><mo stretchy="false">(</mo><mi>λ</mi><mo>−</mo><msub><mi>λ</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mi>R</mi><mi>ln</mi><mo>⁡</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mi>π</mi><mn>4</mn></mfrac><mo>+</mo><mfrac><mi>ϕ</mi><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">x = R (\lambda - \lambda_0) \\y = R \ln \tan\left(\frac{\pi}{4} + \frac{\phi}{2}\right) \\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>注意：上述公式中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>的计算是假设地球为球体。</p><h2><span id="heng-zhou-mo-qia-tuo-tou-ying-transverse-mercator-projection"> 横轴墨卡托投影（Transverse Mercator Projection）</span><a href="#heng-zhou-mo-qia-tuo-tou-ying-transverse-mercator-projection" class="header-anchor">#</a></h2><ul><li>标准轴从赤道改为某一经线（称为中央子午线）</li><li>计算公式十分复杂</li><li>特点<ol><li>变形特性<br>-中央子午线附近区域变形最小，适用于狭长区域，如国家、州、省等。<br>-离中央子午线越远，距离和形状的变形越显著。</li><li>局部精度高<br>-对于狭长地带，可以达到较高的测绘精度。</li><li>正形投影<br>-保持角度关系，但面积和距离可能会有误差。</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> projection </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cool</title>
      <link href="/2025/01/07/cool/"/>
      <url>/2025/01/07/cool/</url>
      
        <content type="html"><![CDATA[<h2><span id="awesome-gee-community-datasets"> awesome-gee-community-datasets</span><a href="#awesome-gee-community-datasets" class="header-anchor">#</a></h2><blockquote><p><a href="https://github.com/samapriya/awesome-gee-community-datasets">https://github.com/samapriya/awesome-gee-community-datasets</a></p></blockquote><h2><span id> </span><a href="#" class="header-anchor">#</a></h2>]]></content>
      
      
      <categories>
          
          <category> cool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>satellites</title>
      <link href="/2025/01/07/satellites/"/>
      <url>/2025/01/07/satellites/</url>
      
        <content type="html"><![CDATA[<h2><span id="landsat8"> Landsat8:</span><a href="#landsat8" class="header-anchor">#</a></h2><ul><li>Bands<ul><li>Pan</li><li>Band 1 Visible(0.43 - 0.45 µm) 30 m</li><li>Band 2 Visible(0.450 - 0.51 µm) 30 m</li><li>Band 3 Visible(0.53 - 0.59 µm) 30 m</li><li>Band 4 Red(0.64 - 0.67 µm) 30 m</li><li>Band 5 Near-Infrared(0.85 - 0.88 µm) 30 m</li><li>Band 6 SWIR 1(1.57 - 1.65 µm) 30 m</li><li>Band 7 SWIR 2 (2.11 - 2.29 µm) 30 m</li><li>Band 8 Panchromatic(PAN)(0.50 - 0.68 µm) 15 m</li><li>Band 9 Cirrus(1.36 - 1.38 µm) 30 m</li></ul></li></ul><h2><span id="landsat-7"> Landsat 7</span><a href="#landsat-7" class="header-anchor">#</a></h2><blockquote><p><a href="https://www.usgs.gov/core-science-systems/nli/landsat/landsat-7">https://www.usgs.gov/core-science-systems/nli/landsat/landsat-7</a></p></blockquote><ul><li>Landsat 7 carries the Enhanced <strong>Thematic Mapper Plus (ETM+)</strong> sensor, an improved version of the <strong>Thematic Mapper</strong> instruments that were onboard Landsat 4 and Landsat 5.</li><li>Landsat 7 products are delivered as 8-bit images with 256 grey levels.</li><li>Enhanced Thematic Mapper Plus (ETM+), Eight spectral bands, including a pan and thermal band:<ul><li>Band 1 Visible (0.45 - 0.52 µm) 30 m</li><li>Band 2 Visible (0.52 - 0.60 µm) 30 m</li><li>Band 3 Visible (0.63 - 0.69 µm) 30 m</li><li>Band 4 Near-Infrared (0.77 - 0.90 µm) 30 m</li><li>Band 5 Short-wave Infrared (1.55 - 1.75 µm) 30 m</li><li>Band 6 Thermal (10.40 - 12.50 µm) 60 m Low Gain / High Gain</li><li>Band 7 Mid-Infrared (2.08 - 2.35 µm) 30 m</li><li>Band 8 Panchromatic (PAN) (0.52 - 0.90 µm) 15 m</li><li>Ground Sampling Interval (pixel size): 30 m reflective, 60 m thermal</li><li>Added the Band 6 Low and High gain 60 m thermal bands</li><li>On-board calibration was added to Landsat 7: a Full Aperture Solar Calibrator (FASC) and a Partial Aperture Solar Calibrator (PASC), in addition to the 2 calibration lamps</li></ul></li></ul><h3><span id="landsat-7-scan-line-corrector-slc-failure"> Landsat 7 Scan Line Corrector (SLC) Failure</span><a href="#landsat-7-scan-line-corrector-slc-failure" class="header-anchor">#</a></h3><ul><li>On May 31, 2003, the Scan Line Corrector (SLC), which compensates for the forward motion of the satellite, failed. Subsequent efforts to recover the SLC were not successful, and the failure is permanent. Without an operating SLC, the sensor’s line of sight traces a zig-zag pattern along the satellite ground track.</li><li>As a result, the imaged area is duplicated, with a width that increases toward the edge of the scene. When the Level-1 data are processed, the duplicated areas are removed, leaving data gaps. Although these scenes only have 78 percent of their pixels remaining after the duplicated areas are removed, these data are still some of the most geometrically and radiometrically accurate of all civilian satellite data in the world</li></ul><h2><span id="landsat-5-instruments"> Landsat 5 Instruments</span><a href="#landsat-5-instruments" class="header-anchor">#</a></h2><blockquote><p><a href="https://www.usgs.gov/core-science-systems/nli/landsat/landsat-5?qt-science_support_page_related_con=0#qt-science_support_page_related_con">https://www.usgs.gov/core-science-systems/nli/landsat/landsat-5?qt-science_support_page_related_con=0#qt-science_support_page_related_con</a></p></blockquote><ul><li>Landsat 5 carried the Multispectral Scanner(MSS) and the Thematic Mapper™ sensors. MSS data acquisitions over the United States ceased in 1992 and global acquisitions ended in 1999. After the TM sensor failed in November 2011, the MSS instrument was brought back online. From June 2012 until January 2013, over 15, 000 MSS scenes were collected.</li><li>Multispectral Scanner(MSS)<ul><li>Four spectral bands(identical to Landsat 1 and 2):</li><li>Band 4 Visible green(0.5 to 0.6 µm) — powered off due to high current in August 1995</li><li>Band 5 Visible red(0.6 to 0.7 µm)</li><li>Band 6 Near-Infrared(0.7 to 0.8 µm)</li><li>Band 7 Near-Infrared(0.8 to 1.1 µm)</li><li>Six detectors for each spectral band provided six scan lines on each active scan</li><li>Ground Sampling Interval(pixel size): 57 x 79 m</li></ul></li><li>Thematic Mapper ™<ul><li>Added the mid-range infrared to the data</li><li>Seven spectral bands, including a thermal band:</li><li>Band 1 Visible (0.45 - 0.52 µm) 30 m</li><li>Band 2 Visible (0.52 - 0.60 µm) 30 m</li><li>Band 3 Visible (0.63 - 0.69 µm) 30 m</li><li>Band 4 Near-Infrared (0.76 - 0.90 µm) 30 m</li><li>Band 5 Near-Infrared (1.55 - 1.75 µm) 30 m</li><li>Band 6 Thermal (10.40 - 12.50 µm) 120 m</li><li>Band 7 Mid-Infrared (2.08 - 2.35 µm) 30 m</li><li>Ground Sampling Interval (pixel size): 30 m reflective, 120 m thermal</li></ul></li></ul><h2><span id="landsat-naming"> Landsat naming</span><a href="#landsat-naming" class="header-anchor">#</a></h2><blockquote><p><a href="https://www.usgs.gov/faqs/what-naming-convention-landsat-collections-level-1-scenes?qt-news_science_products=0#qt-news_science_products">https://www.usgs.gov/faqs/what-naming-convention-landsat-collections-level-1-scenes?qt-news_science_products=0#qt-news_science_products</a></p></blockquote><p>The Landsat Collection 1 Level-1 product identifier includes the Collection processing levels, processing date, collection number, and collection iter category:</p><p><code>LXSS_LLLL_PPPRRR_YYYYMMDD_yyyymmdd_CC_TX</code></p><p>Where:</p><ul><li><code>L</code> = Landsat</li><li><code>X</code> = Sensor<ul><li>“C”=OLI/TIRS combined</li><li>“O”=OLI-only</li><li>“T”=TIRS-only</li><li>“E”=ETM+,</li><li>“T”=“TM,</li><li>“M”=MSS</li></ul></li><li><code>SS</code> = Satellite (”07”=Landsat 7, “08”=Landsat 8)</li><li><code>LLL</code> = Processing correction level (L1TP/L1GT/L1GS)</li><li>PPP = WRS path</li><li>RRR = WRS row</li><li>YYYYMMDD = Acquisition year, month, day</li><li>yyyymmdd - Processing year, month, day</li><li>CC = Collection number (01, 02, …)</li><li>TX = Collection category (“RT”=Real-Time, “T1”=Tier 1, “T2”=Tier 2)</li></ul><p>Example: LC08_L1GT_029030_20151209_20160131_01_RT</p><p>Means: Landsat 8; OLI/TIRS combined; processing correction level L1GT; path 029; row 030; acquired December 9, 2015; processed January 31, 2016; Collection 1; Real-Time</p><h2><span id="landsat-processing-level"> Landsat Processing level</span><a href="#landsat-processing-level" class="header-anchor">#</a></h2><blockquote><p><a href="https://www.usgs.gov/core-science-systems/nli/landsat/landsat-levels-processing#:~:text=Landsat%20scenes%20are%20processed%20to,product%20will%20be%20created%20instead">https://www.usgs.gov/core-science-systems/nli/landsat/landsat-levels-processing#:~:text=Landsat scenes are processed to,product will be created instead</a>.</p></blockquote><ul><li><code>L1PT</code>: Landsat scenes are processed to a Level-1 precision and terrain corrected product (L1TP) if possible. In the case of insufficient reference data, a systematic and terrain corrected L1GT or a systematic L1GS product will be created instead.</li><li><code>L1GT</code> products are created when the systematic product has consistent and sufficient locational accuracy to permit the application of a terrain model.</li><li><code>L1GS</code> products are created when the locational accuracy is not sufficient to apply terrain correction, such as:<ul><li>Insufficient number of ground control points, such as small islands or Antarctic</li><li>Opaque clouds that obscure the ground</li><li>Locational errors greater than the search distance for ground control</li></ul></li></ul><h2><span id="ers-1-ers-2"> <s>ERS-1, ERS-2</s></span><a href="#ers-1-ers-2" class="header-anchor">#</a></h2><p>ERS-1、ERS-2、ENVISAT-1三颗对地观测雷达卫星是由欧空局（ESA，European Space Agency）研制、发射并管理的。ERS-1卫星是欧空局的第一颗对地观测卫星。它于1991年7月17日发射升空，卫星高度在782-785千米。ERS-1卫星的后继星ERS-2卫星于1995年4月21日发射。ENVISAT-1卫星于2002年3月1日发射升空，ENVISAT-1卫星的ASAR传感器与ERS-1 / 2卫星的SAR相比，有了较大的改进，可以使用多种侧视角、两种不同极化方式进行对地观测。</p><p>ERS-1 / 2卫星在相同轨道运行，它们的主要有效载荷的SAR传感器基本相同。中国科学院遥感与数字地球研究所自1995年10月开始接收欧空局ERS-1卫星数据，2003年7月开始接收ERS-2卫星数据，并保存着ERS-1 / 2卫星自1995年至今接收的卫星原始数据，能够处理多种级别的数据产品，产品格式为CEOS、ENVISAT等。如需ERS-1 / 2卫星数据，请与遥感地球所数据服务部联系。</p><table><thead><tr><th>发射时间</th><th>ERS-1：1991-07-17 ERS-2：1995-04-21</th></tr></thead><tbody><tr><td>失效时间</td><td>ERS-1：2000-03-10 ERS-2：2010-07-01</td></tr><tr><td>轨道倾角（°）</td><td>98.2</td></tr><tr><td>运行周期（分钟）</td><td>100</td></tr><tr><td>轨道重复周期（天）</td><td>35</td></tr><tr><td>工作波段</td><td><em>C</em></td></tr><tr><td>极化方式</td><td><em>VV</em></td></tr><tr><td>空间分辨率(米)</td><td>30</td></tr></tbody></table><h2><span id="envisat-1"> <s>ENVISAT-1</s></span><a href="#envisat-1" class="header-anchor">#</a></h2><p>ENVISAT-1卫星是欧洲迄今建造的最大的环境卫星，也是费用最高的地球观测卫星（总研制成本约25亿美元）。星上载有10种探测设备，其中4种是ERS-1/2所载设备的改进型，所载最大设备是先进的合成孔径雷达（ASAR），可生成海洋、海岸、极地冰冠和陆地的高质量图像，为科学家提供更高分辨率的图像来研究海洋的变化。其他设备将提供更高精度的数据，用于研究地球大气层及大气密度。作为ERS-1/2合成孔径雷达卫星的延续，Envisat-1数据主要用于监视环境，即对地球表面和大气层进行连续的观测，供制图、资源勘查、气象及灾害判断之用。中国科学院遥感与数字地球研究所自2003年11月开始接收欧空局ENVISAT-1卫星数据，并保存着ENVISAT-1卫星自2003年至今接收的卫星原始数据，能够提供多种产品级别的数据，数据产品的输出格式是ENVISAT格式。</p><p>在科技部“国家科技基础条件平台”专项支持下， Envisat数据共享平台现在开始投入运行。请登录ENVISAT雷达卫星数据共享网站查询下载ENVISAT-1卫星数据。</p><table><thead><tr><th>所属国家</th><th>欧空局</th></tr></thead><tbody><tr><td>发射时间</td><td>2002-03-01</td></tr><tr><td>失效时间</td><td>2012-04-08</td></tr><tr><td>运行周期（分钟）</td><td>101</td></tr><tr><td>每天绕地球圈数</td><td>14.4</td></tr><tr><td>轨道重复周期（天）</td><td>30</td></tr><tr><td>工作波段</td><td>C</td></tr><tr><td>工作频率（GHz）</td><td>5.3</td></tr><tr><td>极化方式</td><td>HH、VV（成像模式、宽模式）；VV/HH、VV/VH、HH/HV（交叉极化模式）</td></tr><tr><td>空间分辨率（米）</td><td>30（成像模式、交叉极化模式）；150（宽模式）</td></tr><tr><td>幅宽（千米）</td><td>56～105（成像模式、交叉极化模式）；400（宽模式）</td></tr></tbody></table><hr><h2><span id="modis-1999"> MODIS(1999)</span><a href="#modis-1999" class="header-anchor">#</a></h2><ul><li>MODIS: MODerate-resolution Imaging Spectroradiometer</li><li>launched 1999 on board the <strong>Terra (EOS AM)</strong> Satellite, and in <strong>2002</strong> on board the <strong>Aqua (EOS PM)</strong> satellite.</li><li>The instruments capture data in <strong>36 spectral bands</strong> ranging in wavelength from <strong>0.4 µm to 14.4 µm</strong> and at varying spatial resolutions (<strong>2 bands at 250 m, 5 bands at 500 m and 29 bands at 1 km</strong>).</li><li>Together the instruments image the entire Earth <strong>every 1 to 2 days</strong>.</li><li>They are designed to <strong>provide measurements in large-scale global dynamics including changes in Earth’s cloud cover</strong>, radiation budget and processes occurring in the oceans, on land, and in the lower atmosphere.</li></ul><hr><h2><span id="rapideye-2008"> RapidEye(2008)</span><a href="#rapideye-2008" class="header-anchor">#</a></h2><ul><li>The company <strong>operated a five-satellite constellation producing 5 meter resolution imagery</strong></li><li>Today, <strong>RapidEye refers to the constellation of 5 earth observation satellites owned and operated by Planet Labs</strong>.</li><li>Five Identical Satellites: Each of RapidEye’s five satellites contain identical sensors, are equally calibrated and travel on the same orbital plane (at an altitude of 630 km).</li><li><strong>Blue (440-510 nm), Green (520-590 nm), Red (630-690 nm), Red-Edge (690-730 nm) and Near-Infrared (760-880 nm)</strong>. The nominal resolution on the ground is <strong>6.5 meters</strong>, corresponding to NIIRS 2.</li><li>RapidEye’s satellites <strong>are the first commercial satellites to include the Red-Edge band</strong>, <strong>which is sensitive to changes in chlorophyll content</strong>. Studies show that this band can assist in monitoring vegetation health, improve species separation and help in measuring protein and nitrogen content in biomass.</li></ul><hr><h2><span id="meris"> MERIS</span><a href="#meris" class="header-anchor">#</a></h2><ul><li>The MEdium resolution Imaging Spectrometer (MERIS),</li><li>one of the payloads on the European Space Agency’s Envisat,</li><li>is radiometrically the most accurate imaging spectrometer in space (Curran and Steele 2004).</li><li>It has 15 programmable (2.5–20nm wide) wavebands in the 390–1040nm region</li><li>and a spatial resolution of 300 m.</li><li>three-day repeat cycle,</li><li>MERIS is a potentially valuable sensor for the measurement and monitoring of terrestrial environments at regional to global scales (Verstraete et al. 1999).</li><li>In the standard band setting, it has five discontinuous wavebands in red and near-infrared (NIR) wavelengths with band centres at 665 nm, 681.25 nm, 708.75 nm, 753.75nm and 760.625 nm.</li></ul><hr><h2><span id="digitalglobe"> DigitalGlobe</span><a href="#digitalglobe" class="header-anchor">#</a></h2><p>DigitalGlobe is an American commercial vendor of space imagery and geospatial content, and operator of civilian remote sensing spacecraft.</p><h3><span id="earlybird-1"> <s>EarlyBird-1</s></span><a href="#earlybird-1" class="header-anchor">#</a></h3><h3><span id="ikonos"> <s>IKONOS</s></span><a href="#ikonos" class="header-anchor">#</a></h3><p>IKONOS was launched September 24, 1999. It was the world’s first high-resolution commercial imaging satellite to collect panchromatic (black-and-white) images with .80 m resolution and multispectral (color) imagery with 3.2-meter resolution.[11] On March 31, 2015, IKONOS was officially decommissioned after more than doubling her mission design life, spending 5,680 days in orbit and making 83,131 trips around the earth.[12]</p><h3><span id="quickbird"> <s>QuickBird</s></span><a href="#quickbird" class="header-anchor">#</a></h3><p>QuickBird, launched on October 18, 2001,[5] was DigitalGlobe’s primary satellite until early 2015. It was built by Ball Aerospace, and launched by a Boeing Delta II. It is in a 450 km altitude, −98 degree inclination sun-synchronous orbit. An earlier launch attempt resulted in the loss of QuickBird-1. It included a panchromatic camera with a 60 cm (24 in) resolution and a multispectral camera with a 2.4 m (7 ft 10 in) resolution. On January 27, 2015, QuickBird was de-orbited, exceeding her initial life expectancy by nearly 300%.[12]</p><h3><span id="geoeye-1"> GeoEye-1</span><a href="#geoeye-1" class="header-anchor">#</a></h3><ul><li><strong>0.41-meter panchromatic</strong></li><li><strong>1.65-meter multispectral resolution</strong>.</li><li>revisit any point on Earth <strong>once every three days</strong> or sooner.</li></ul><h3><span id="worldview-1"> WorldView-1</span><a href="#worldview-1" class="header-anchor">#</a></h3><ul><li>Launched on September 18, 2007.</li><li>It included a panchromatic only camera with a <strong>50 cm</strong> (20 in) maximum resolution.</li></ul><h3><span id="worldview-2"> WorldView-2</span><a href="#worldview-2" class="header-anchor">#</a></h3><ul><li>lanuch at October 8, 2009.</li><li>a panchromatic sensor with a 46 cm (18 in) maximum resolution and</li><li>a multispectral sensor of 184 cm</li></ul><h3><span id="worldview-3"> WorldView-3</span><a href="#worldview-3" class="header-anchor">#</a></h3><ul><li>launched on August 13, 2014.</li><li>25 cm (9.8 in).</li><li>average revisit time of less than once per day</li></ul><p>Previously, DigitalGlobe was only licensed to sell images with a resolution below 50 cm (20 in) to the US military.[19] However, DigitalGlobe obtained permission, in June 2014, from the U.S. Department of Commerce, to allow the company to more widely exploit its highest-quality and industry-leading commercial satellite imagery. The company was permitted to offer customers the highest resolution imagery available from their constellation. Additionally, the updated approvals allowed the sale of imagery to customers at up to 25 cm panchromatic and 100 cm (39 in) multispectral ground sample distance (GSD), beginning six months after WorldView-3 became operational.</p><h3><span id="worldview-4"> WorldView-4</span><a href="#worldview-4" class="header-anchor">#</a></h3><p>The WorldView-4 satellite is designed to provide panchromatic images at a highest resolution of 0.31 meters per pixel (12.2 in/px), and multispectral images at 1.24 meters per pixel (48.8 in/px).[22] Originally named GeoEye-2, the spacecraft was designed and built by Lockheed Martin,[23] while the camera payload was provided by ITT Corporation.[24]</p><p>Following the merger of GeoEye and DigitalGlobe, DigitalGlobe announced that GeoEye-2 would be completed as a ground spare to be launched if or when required.[25][26] It was renamed to WorldView-4 in July 2014, when the company announced that it would be launched in Fall 2016.[27][28]</p>]]></content>
      
      
      <categories>
          
          <category> remote sensing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remote sensing </tag>
            
            <tag> satellite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 学习笔记</title>
      <link href="/2025/01/07/git-note/"/>
      <url>/2025/01/07/git-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="base"> base</span><a href="#base" class="header-anchor">#</a></h2><ul><li>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li><li>需要提交的文件修改通通放到暂存区(<code>git add</code>)，然后，一次性提交暂存区的所有修改(<code>git commit</code>)。</li><li>Git跟踪并管理的是修改，而非文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config –global alias.lg “<span class="built_in">log</span> –color –graph –pretty=format:‘%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset’ –abbrev-commit”</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4428238-5b04868bd09cb72a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/546/format/webp" alt></p><h2><span id="common-routine"> common routine</span><a href="#common-routine" class="header-anchor">#</a></h2><ul><li>S1: 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- file</code></li><li>S2: 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了S1，第二步按S1操作。</li><li>S3: <code>git commit --amend</code></li><li>S3: 我们有一次commit不是不是很满意，需要回到上一次的Commit里面。那么这个时候就需要通过<code>reset</code>，把HEAD指针指向上一次的<code>commit</code>的点。它有三种模式，<code>soft</code>,<code>mixed</code>,<code>hard</code>，具体的使用方法下面这张图，展示的很全面了。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4428238-fcad08ebe26933a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/638/format/webp" alt></p><h2><span id="restore-restore-working-tree-files"> restore: Restore working tree files</span><a href="#restore-restore-working-tree-files" class="header-anchor">#</a></h2><ul><li>Restore working tree files, (even though it is no longer in the working tree)</li><li>What can do:<ul><li>from another <code>commit</code><ul><li><code>git restore --source master~2 Makefile</code>  (reverts the <code>Makefile</code> to two revisions back)</li></ul></li><li>from <strong>the index</strong> :<ul><li><code>git restore hello.c</code> （restore hello.c from the index）</li><li><code>git restore '*.c'</code>  （restore all *.c files）</li><li><code>git restore .</code>  (restore all files in current directory)</li></ul></li></ul></li></ul><h2><span id="reset-reset-current-head-to-the-specified-state"> reset: Reset current HEAD to the specified state</span><a href="#reset-reset-current-head-to-the-specified-state" class="header-anchor">#</a></h2><ul><li>what can do:<ul><li><code>git reset</code> (undo <code>git add</code>)</li><li><code>git reset --soft HEAD^</code> (<strong>Undo a commit and redo，</strong> This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before <code>reset</code>.)</li><li><code>git reset --hard HEAD~3</code> （<strong>Undo commits permanently，</strong> The last three commits <code>HEAD</code>, <code>HEAD^</code>, and <code>HEAD~2</code> were bad and you do not want to ever see them again. <strong>Do not do this if you have already given these commits to somebody else</strong>.）</li><li><code>git reset --hard</code> (<strong>Undo a merge or pull)</strong></li><li><code>git reset -- hello.c</code> (<strong>Reset a single file in the index)</strong></li></ul></li><li><code>reset</code> 的本质：移动 <code>HEAD</code> 以及它所指向的 <code>branch</code></li><li>实质上，<code>reset</code> 这个指令虽然可以用来撤销 <code>commit</code> ，但它的实质行为并不是撤销，而是移动 HEAD ，并且「捎带」上 HEAD 所指向的 <code>branch</code>（如果有的话）。也就是说，<code>reset</code> 这个指令的行为其实和它的字面意思 “<code>reset</code>”（重置）十分相符：它是用来重置 <code>HEAD</code> 以及它所指向的 <s>branch</s> 的位置的。</li><li>而 <code>reset –hard HEAD^</code> 之所以起到了撤销 <code>commit</code> 的效果，是因为它把 <code>HEAD</code> 和它所指向的 <code>branch</code> 一起移动到了当前 <code>commit</code> 的父 <code>commit</code> 上，从而起到了「撤销」的效果：</li></ul><h1><span id="dealing-with-line-endings"> Dealing with line endings</span><a href="#dealing-with-line-endings" class="header-anchor">#</a></h1><blockquote><p><a href="https://help.github.com/articles/dealing-with-line-endings/">https://help.github.com/articles/dealing-with-line-endings/</a></p></blockquote><ol><li>Global settings for line endings</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf <span class="literal">true</span></span><br><span class="line"><span class="comment"># Configure Git on Windows to properly handle line endings</span></span><br></pre></td></tr></table></figure><ol><li>Per-repository settings: The .gitattributes file</li></ol><p>``</p><h2><span id="shan-chu-wen-jian"> 删除文件</span><a href="#shan-chu-wen-jian" class="header-anchor">#</a></h2><ul><li>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了<code>rm readme.txt</code></li><li>现在你有两个选择<ul><li>一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></li><li>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本<code>git checkout -- readme.txt</code></li></ul></li></ul><h2><span id="chuang-jian-yu-he-bing-fen-zhi"> 创建与合并分支</span><a href="#chuang-jian-yu-he-bing-fen-zhi" class="header-anchor">#</a></h2><ul><li><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支</li><li>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长</li><li>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上</li><li>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变</li><li>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并</li><li>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支</li><li>创建dev分支，然后切换到dev分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br></pre></td></tr></table></figure><p>equal to</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><ul><li><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号</li><li>把dev分支的工作成果合并到master分支上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure><ul><li>git merge命令用于合并指定分支到当前分支</li><li>删除分支</li><li><code>git branch -d dev</code></li></ul><h2><span id="jie-jue-chong-tu"> 解决冲突</span><a href="#jie-jue-chong-tu" class="header-anchor">#</a></h2><ul><li>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容分支管理策略</li><li>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。</li><li>如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br></pre></td></tr></table></figure><ul><li>因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去</li><li>在实际开发中，我们应该按照几个基本原则进行分支管理：</li><li>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</li><li>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</li><li>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</li><li>所以，团队合作的分支看起来就像这样：</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex 学习笔记</title>
      <link href="/2025/01/07/latex-note/"/>
      <url>/2025/01/07/latex-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="chen-xian-ti-vs-fei-chen-xian-ti"> 衬线体 vs 非衬线体</span><a href="#chen-xian-ti-vs-fei-chen-xian-ti" class="header-anchor">#</a></h2><h3><span id="chen-xian-ti-he-fei-chen-xian-ti-de-she-ji-feng-ge-dui-bi"> 衬线体和非衬线体的设计风格对比</span><a href="#chen-xian-ti-he-fei-chen-xian-ti-de-she-ji-feng-ge-dui-bi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>属性</strong></th><th><strong>衬线体（Serif）</strong></th><th><strong>非衬线体（Sans-serif）</strong></th></tr></thead><tbody><tr><td><strong>装饰性</strong></td><td>具有装饰性笔画（衬线），显得优雅、传统。</td><td>无衬线，笔画简单干净，显得简洁、现代。</td></tr><tr><td><strong>可读性</strong></td><td>在印刷材料上更清晰，适合长时间阅读。</td><td>在屏幕上更清晰，特别是小字号时。</td></tr><tr><td><strong>风格传达</strong></td><td>传达权威性、经典感和正式感。</td><td>传达现代感、简洁感和开放感。</td></tr><tr><td><strong>视觉复杂性</strong></td><td>字母形状更复杂，强调设计细节。</td><td>字母形状简化，注重内容传达。</td></tr></tbody></table><h3><span id="chen-xian-ti-he-fei-chen-xian-ti-de-gua-yong-chang-jing"> 衬线体和非衬线体的适用场景</span><a href="#chen-xian-ti-he-fei-chen-xian-ti-de-gua-yong-chang-jing" class="header-anchor">#</a></h3><table><thead><tr><th><strong>场景</strong></th><th><strong>衬线体（Serif）</strong></th><th><strong>非衬线体（Sans-serif）</strong></th></tr></thead><tbody><tr><td><strong>印刷品</strong></td><td>书籍、报纸、论文等需要长时间阅读的材料（如 Times New Roman）。</td><td>传单、海报或需要强调标题的印刷品（如 Helvetica）。</td></tr><tr><td><strong>屏幕阅读</strong></td><td>高分辨率屏幕的长文档（如 Georgia），但效果不如非衬线体适合低分辨率屏幕。</td><td>网页、移动设备、小字号文本（如 Arial、微软雅黑）。</td></tr><tr><td><strong>标题与强调</strong></td><td>正式场合的标题或需要体现权威的场景（如传统书籍封面）。</td><td>演示文稿、广告、现代网页标题（如 Futura）。</td></tr><tr><td><strong>品牌与标志</strong></td><td>传统、稳重的品牌（如奢侈品、法律事务所）。</td><td>创新、科技或简约风格的品牌（如科技公司）。</td></tr><tr><td><strong>正式文件</strong></td><td>学术论文、合同等需要严肃感的文件（如 Times New Roman、宋体）。</td><td>简历、现代风格的报告等（如 Helvetica）。</td></tr></tbody></table><h3><span id="chen-xian-ti-he-fei-chen-xian-ti-de-you-que-dian-dui-bi"> 衬线体和非衬线体的优缺点对比</span><a href="#chen-xian-ti-he-fei-chen-xian-ti-de-you-que-dian-dui-bi" class="header-anchor">#</a></h3><table><thead><tr><th><strong>属性</strong></th><th><strong>衬线体（Serif）</strong></th><th><strong>非衬线体（Sans-serif）</strong></th></tr></thead><tbody><tr><td><strong>优点</strong></td><td>1. 在印刷品中可读性更高，适合长时间阅读。</td><td>1. 在屏幕上清晰度更高，特别是在小字号下。</td></tr><tr><td></td><td>2. 传达正式、传统、权威的感觉。</td><td>2. 简洁、现代，适合多种用途。</td></tr><tr><td><strong>缺点</strong></td><td>1. 小字号在屏幕上可能不清晰。</td><td>1. 在印刷品中可能缺乏优雅感。</td></tr><tr><td></td><td>2. 在设计复杂的场景中可能显得笨重。</td><td>2. 长时间阅读时可能会导致视觉疲劳。</td></tr></tbody></table><h2><span id="latex-zhong-de-zi-ti"> LaTeX 中的字体</span><a href="#latex-zhong-de-zi-ti" class="header-anchor">#</a></h2><p>在 LaTeX 中，可以通过多种方式设置字体，主要包括：</p><h3><span id="biao-zhun-zi-ti-ming-ling"> 标准字体命令</span><a href="#biao-zhun-zi-ti-ming-ling" class="header-anchor">#</a></h3><p>LaTeX 提供了基本的字体样式命令：</p><ul><li><p><strong>字体系列</strong></p><ul><li><code>\textrm&#123;&#125;</code> 或 <code>&#123;\rmfamily&#125;</code>：罗马字体 (Serif)</li><li><code>\textsf&#123;&#125;</code> 或 <code>&#123;\sffamily&#125;</code>：无衬线字体 (Sans-serif)</li><li><code>\texttt&#123;&#125;</code> 或 <code>&#123;\ttfamily&#125;</code>：等宽字体 (Monospace)</li></ul></li><li><p><strong>字体形状</strong></p><ul><li><code>\textit&#123;&#125;</code> 或 <code>&#123;\itshape&#125;</code>：斜体</li><li><code>\textsl&#123;&#125;</code> 或 <code>&#123;\slshape&#125;</code>：倾斜</li><li><code>\textbf&#123;&#125;</code> 或 <code>&#123;\bfseries&#125;</code>：加粗</li><li><code>\textsc&#123;&#125;</code> 或 <code>&#123;\scshape&#125;</code>：小型大写字母</li><li><code>\underline&#123;&#125;</code>：下划线</li></ul></li><li><p><strong>字体大小</strong></p><ul><li><code>\tiny</code>：非常小</li><li><code>\scriptsize</code>：脚注大小</li><li><code>\footnotesize</code>：稍小</li><li><code>\small</code>：小字体</li><li><code>\normalsize</code>：正常大小</li><li><code>\large</code>：稍大</li><li><code>\Large</code>：大字体</li><li><code>\LARGE</code>：更大字体</li><li><code>\huge</code>：很大字体</li><li><code>\Huge</code>：最大字体</li></ul></li><li><p>常用的两种字体修改命令(前者用于少量内容字体更换, 后者用于分组或者环境中字体的整体更换.)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\textit&#123;Italic font test&#125;</span><br><span class="line">&#123;\bfseries Bold font test&#125;</span><br></pre></td></tr></table></figure><h2><span id="ctex-zhong-de-zi-ti"> ctex中的字体</span><a href="#ctex-zhong-de-zi-ti" class="header-anchor">#</a></h2><ul><li><code>ctex</code>会根据用户使用的编译方式，（自动）在底层选择不同的中文支持方式和字体（见下表）.<ul><li><code>pdflatex</code>使用<code>CJK</code>宏包编译，</li><li><code>xelatex</code>使用<code>xeCJK</code>宏包编译.</li><li>不同的编译方式和中文支持方式会在一定程度上影响<code>ctex</code>宏集的行为，比如宏包对文档编码、字体选择、空格、标点等的处理。</li><li>但是，可以使用 <code>\setCJKmainfont</code>、<code>\setCJKsansfont</code> 和 <code>\setCJKmonofont</code> 指定(中文）主字体、无衬线字体和等宽字体：(需要<code>\usepackage&#123;fontspec&#125;</code>)</li><li>但是，可以使用 <code>\setmainfont</code>、<code>\setsansfont</code> 和 <code>\setmonofont</code> 指定(英文）主字体、无衬线字体和等宽字体：(需要<code>\usepackage&#123;fontspec&#125;</code>)</li></ul></li></ul><table><thead><tr><th>特性</th><th><strong>CJK</strong></th><th><strong>xeCJK</strong></th></tr></thead><tbody><tr><td><strong>编译引擎</strong></td><td>pdfLaTeX、dvips 等</td><td>XeLaTeX、LuaLaTeX</td></tr><tr><td><strong>字体支持</strong></td><td>需要手动配置字体文件路径</td><td>直接使用系统字体，无需额外配置</td></tr><tr><td><strong>编码支持</strong></td><td>支持 GBK、Big5 等传统编码，UTF-8 支持有限</td><td>原生支持 UTF-8 编码</td></tr><tr><td><strong>功能灵活性</strong></td><td>功能有限，难以满足复杂排版需求</td><td>提供高级功能，如字符间距调整、标点悬挂等</td></tr><tr><td><strong>配置难度</strong></td><td>配置复杂，依赖字体定义文件</td><td>配置简单，常用 CTeX 宏包简化中文支持</td></tr><tr><td><strong>现代支持</strong></td><td>偏向传统 LaTeX 用法，逐渐被淘汰</td><td>现代工具，推荐用于当前中文排版</td></tr><tr><td><strong>应用场景</strong></td><td>兼容性需求高的旧文档，或者限制使用 pdfLaTeX 的项目</td><td>现代中文文档排版，特别是涉及多语言和复杂字体配置的场景</td></tr></tbody></table><h2><span id> <img src="font.png" alt="ctex font map"></span><a href="#" class="header-anchor">#</a></h2><ul><li>同时，<code>ctex</code>定义了一些字体命令用来局部更换字体 (<code>\songti</code>, <code>\heiti</code>等)<br><img src="font2.png" alt="ctex font define"></li></ul><hr><p><img src="zihao.png" alt="zihao"></p><h2><span id="chang-yong-bao"> 常用包</span><a href="#chang-yong-bao" class="header-anchor">#</a></h2><ul><li>设计页面尺寸 <code>geometry</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\usepackage&#123;geometry&#125;</span><br><span class="line">\geometry&#123;a6paper, centering, scale = 0.8&#125;</span><br></pre></td></tr></table></figure><ul><li>改变图表标题格式 <code>caption</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\usepackage[format=hang, font=small, textfont=it]&#123;caption&#125;</span><br></pre></td></tr></table></figure><ul><li>增减目录的项目 <code>tocbibind</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\usepackage[nottoc]&#123;tocbibind&#125;</span><br></pre></td></tr></table></figure><h2><span id="newcommand"> newcommand</span><a href="#newcommand" class="header-anchor">#</a></h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span><span class="keyword">\degree</span>&#123;<span class="built_in">^</span><span class="keyword">\circle</span>&#125;</span><br></pre></td></tr></table></figure><h2><span id="biao-dian"> 标点</span><a href="#biao-dian" class="header-anchor">#</a></h2><ul><li><code>-</code> : 单独使用时为连字符 <code>hyphen</code>, 两个连用时是 <code>en dash</code>, 表示数字范围, 三个连用为<code>em dash</code>, 即破折号.不过中文中数字范围用 ~ .</li><li>以字母命名的宏,后面空格会被省略, 如果有空格,可以使用 <code>space</code> 或者 命令后直接加一个空的分组<code>&#123;&#125;</code>, 或者用一个分组把命令包起来</li><li>不可分开的空格(<code>ties</code>)使用 <code>~</code></li><li>汉字后的空格会被忽略掉</li><li><code>xelatex编译时</code>,汉字和其他内容之间没有空格时, <code>xeCJK</code>会自动添加. 如果要避免xeCJK的作用,可以吧汉字放进一个盒子中<code>&#123;&#125;</code>, 如果要完全禁止汉字与其他内容之间的空格<code>\CJKsetecglue&#123;&#125;</code></li><li>`phantom~空格, 产生于参数内容一样大小的空盒子</li><li><code>\\</code> 直接从当前位置领起一行,但不分段,</li><li><code>\linebreak</code>指定一行的断点</li></ul><h2><span id="chang-yong-te-shu-fu-hao"> 常用特殊符号</span><a href="#chang-yong-te-shu-fu-hao" class="header-anchor">#</a></h2><ul><li><code>\S</code></li><li><code>\dag</code></li><li><code>\ddag</code></li><li><code>\P</code></li><li><code>\copyright</code></li><li><code>\textregistered</code></li><li><code>\texttrademark</code></li><li><code>\pounds\</code></li><li><code>\textbullet</code></li></ul><h2><span id="qi-ta"> 其他</span><a href="#qi-ta" class="header-anchor">#</a></h2><ul><li>强调文字 <code>\emph</code></li><li>下划线 <code>\underline</code> in <code>ulem</code> package</li></ul><h2><span id="zi-ti-da-xiao"> 字体大小</span><a href="#zi-ti-da-xiao" class="header-anchor">#</a></h2><p>基本命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\tiny</span><br><span class="line">\scriptsize</span><br><span class="line">\fontnotesize</span><br><span class="line">\small</span><br><span class="line">\normalsize</span><br><span class="line">\large</span><br><span class="line">\Large</span><br><span class="line">\LARGE</span><br><span class="line">\huge</span><br><span class="line">\Huge</span><br></pre></td></tr></table></figure><ul><li>中文中除此之外还有ctex提供的<code>\zihao</code>命令</li><li><code>ctex</code> 中 <code>ctexart</code>, <code>ctexrep</code>, <code>ctexbook文档类中提供了两个选项</code>,c5size和cs4size, 影响全文的文字大小和.</li></ul><h2><span id="xing-ju"> 行距</span><a href="#xing-ju" class="header-anchor">#</a></h2><p><code>\linespread</code></p><h2><span id="duan-luo"> 段落</span><a href="#duan-luo" class="header-anchor">#</a></h2><ul><li>临时禁用段落缩进: <code>\noindent</code></li><li><code>\indent</code> 产生一个 <code>\parindent</code>设置的缩进量</li><li>段间距: <code>\setlength&#123;\parskip&#125;&#123;0pt&#125;</code></li></ul><h2><span id="huan-jing"> 环境</span><a href="#huan-jing" class="header-anchor">#</a></h2><p>文本环境</p><ul><li><code>quote</code></li><li><code>quotation</code></li><li><code>verse</code></li><li><code>abstract</code></li></ul><p>列表环境</p><ul><li><code>enumerate</code></li><li><code>itemize</code></li></ul><h2><span id="zi-dong-hua"> 自动化</span><a href="#zi-dong-hua" class="header-anchor">#</a></h2><ul><li><code>\tableofcontents</code></li><li><code>\listoffigures</code></li><li><code>\listoftables</code></li><li>交叉引用 <code>\lable</code>, <code>\ref</code>, <code>\pageref</code></li></ul><h2><span id="biao-ge"> 表格</span><a href="#biao-ge" class="header-anchor">#</a></h2><ul><li><code>tabular</code>环境</li><li><code>array</code>环境</li><li>垂直对齐: t, b, 默认</li><li>水平对齐: l, c, r</li><li>p{宽}: 本列具有固定宽度</li><li>{次数}{格式}: 重复</li><li>tabular和array环境都是一个普通的盒子,会和文字等连接在一起. 所以一般表格会放在一个带有编号,标题的浮动体.</li><li>|: 画一条竖线,但不占表项计数</li><li>按小数点对齐, dcolumn宏包,提供了新的列格式说明符D, 带有三个参数,分别表示小数点的输入方式,小数点的输出方式和最大小数位数,</li><li>长表格: longtable宏包</li><li>三线表: booktabs宏包, 新命令, , ,</li></ul><h2><span id="tu-pian"> 图片</span><a href="#tu-pian" class="header-anchor">#</a></h2><ul><li>graphic 或者 graphicx宏包, 然后使用 添加图片</li><li>draft 模式:</li><li></li></ul><h2><span id="fu-dong-ti-yu-biao-ti-kong-zhi"> 浮动体与标题控制</span><a href="#fu-dong-ti-yu-biao-ti-kong-zhi" class="header-anchor">#</a></h2><ul><li>预定义的两种浮动体环境 figure 和 table</li><li>位置选项 h, t, b, p</li><li>float宏包提供了新的位置选项H</li><li>浮动体的另一个重要功能是添加标题, 交叉引用需要的</li></ul><h2><span id="newcommand"> newcommand</span><a href="#newcommand" class="header-anchor">#</a></h2><blockquote><p><a href="https://tex.stackexchange.com/questions/36175/what-do-newcommand-renewcommand-and-providecommand-do-and-how-do-they-differ">https://tex.stackexchange.com/questions/36175/what-do-newcommand-renewcommand-and-providecommand-do-and-how-do-they-differ</a></p></blockquote><ul><li><code>\newcommand</code> defines a new command, and makes an error if it is already defined.</li><li><code>\renewcommand</code> redefines a predefined command, and makes an error if it is not yet defined.</li><li><code>\providecommand</code> defines a new command if it isn’t already defined.</li></ul><p>If you want to define a command whether it is new or predefined, you can use <code>\def</code> or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\providecommand\foo&#123;&#125;</span><br><span class="line">\renewcommand\foo&#123;...&#125;</span><br></pre></td></tr></table></figure><h2><span id="shi-yong-ctex"> 使用ctex</span><a href="#shi-yong-ctex" class="header-anchor">#</a></h2><ul><li>用户在使用非标准文档类及 beamer 时，如果需要添加中文及版式的支持，则可以使用ctex 宏包。</li><li>对于建立在 LATEX 标准文档类之上开发的文档类，在使用 ctex 宏包时加上 heading 选项，可以将章节标题设置为中文风格。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\usePackage[heading=true][ctex]</span><br></pre></td></tr></table></figure><h3><span id="ctexset"> ctexset</span><a href="#ctexset" class="header-anchor">#</a></h3><ul><li>是 CTEX 宏集的通用控制命令，用来在宏包载入后控制宏包的各项功能。的参数是一个键值列表，以通用的接口完成各项设置。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\cexset&#123;</span><br><span class="line">    abstractname = &#123;本文概要&#125;</span><br><span class="line">    bibname      = &#123;文\quad 献&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="zhong-wen-zhi-chi-fang-shi"> 中文支持方式</span><a href="#zhong-wen-zhi-chi-fang-shi" class="header-anchor">#</a></h3><ul><li><code>(pdf) Latex</code> -&gt; <code>CJK</code></li><li><code>xelatex</code> -&gt; <code>xeCJK</code></li><li><code>lualatex</code> -&gt; <code>LuaTex-ja</code></li><li><code>upLatex</code> -&gt; 原生</li></ul><h3><span id="zhong-wen-zi-ku"> 中文字库</span><a href="#zhong-wen-zi-ku" class="header-anchor">#</a></h3><ul><li>通常，由 CTEX 宏集进行的自动配置已经足够使用，无需用户手工干预;但是 CTEX 仍然 提供了一系列选项，供在 CTEX 的自动选择机制因为意外情况失效，或者在用户有特殊需求 的情况下使用。除非必要，用户不应使用这些选项。</li></ul><h2><span id="beamer"> beamer</span><a href="#beamer" class="header-anchor">#</a></h2><h3><span id="pause"> pause</span><a href="#pause" class="header-anchor">#</a></h3><ul><li>case 1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;frame&#125;</span><br><span class="line">\frametitle&#123;Sample frame title&#125;</span><br><span class="line">This is a text in second frame.</span><br><span class="line">For the sake of showing an example.</span><br><span class="line"></span><br><span class="line">\begin&#123;itemize&#125;</span><br><span class="line"> \item&lt;1-&gt; Text visible on slide 1</span><br><span class="line"> \item&lt;2-&gt; Text visible on slide 2</span><br><span class="line"> \item&lt;3&gt; Text visible on slide 3</span><br><span class="line"> \item&lt;4-&gt; Text visible on slide 4</span><br><span class="line">\end&#123;itemize&#125;</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>case 2</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;frame&#125;</span><br><span class="line"> In this slide \pause</span><br><span class="line"></span><br><span class="line"> the text will be partially visible \pause</span><br><span class="line"></span><br><span class="line"> And finally everything will be there</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="problems"> Problems</span><a href="#problems" class="header-anchor">#</a></h2><h3><span id="font-shape-undefined-using-instead-on-input-line"> Font shape <code>…' undefined using</code>…’ instead on input line …</span><a href="#font-shape-undefined-using-instead-on-input-line" class="header-anchor">#</a></h3><p>另一个字体问题。意思是找不到 xxx 字体就用 yyy 字体代替，一般来说要么是缺粗体要么是缺意大利体（斜体），除非能看出编译结果受到影响，否则也可以忽略。这里具体是苹方字体缺了意大利体，于是用直立体代替。我们知道中文一般是没有意大利体的，所以对应到西文里面用意大利体表示强调，中文可以换一种字体：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;ctexbeamer&#125;</span><br><span class="line"></span><br><span class="line">% beamer 默认使用无衬线字体，这里用苹方 + 行楷的组合</span><br><span class="line">\setCJKsansfont&#123;PingFang SC Thin&#125;[</span><br><span class="line">  BoldFont       = PingFang SC Medium,</span><br><span class="line">  ItalicFont     = Xingkai SC Light,</span><br><span class="line">  BoldItalicFont = Xingkai SC Bold</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;frame&#125;</span><br><span class="line"></span><br><span class="line">我们要\emph&#123;强调&#125;一下！</span><br><span class="line"></span><br><span class="line">\strong&#123;加粗版“我们要\emph&#123;强调&#125;一下！”&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作者：stone-zeng 链接：<a href="https://www.zhihu.com/question/369080188/answer/1004059397">https://www.zhihu.com/question/369080188/answer/1004059397</a></p><hr><h3><span id="font-does-not-contain-requested-script-cjk"> Font “…” does not contain requested Script “CJK”</span><a href="#font-does-not-contain-requested-script-cjk" class="header-anchor">#</a></h3><blockquote><p>Font “…” does not contain requested Script “CJK”这个警告可以忽略，不影响编译结果。特点有：字体往往是 Songti SC 或者 Fandol提示信息包含Script “CJK” 原因是字体里面没有GSUB表，更多细节参考：</p></blockquote><p>作者：stone-zeng 链接：<a href="https://www.zhihu.com/question/369080188/answer/1004059397">https://www.zhihu.com/question/369080188/answer/1004059397</a></p><h3><span id="package-ctexcap-is-deprecated"> Package `ctexcap’ is deprecated@</span><a href="#package-ctexcap-is-deprecated" class="header-anchor">#</a></h3><ul><li>ctexcap是过时宏包，相当于默认打开heading选项的ctex包（不是 CTEX 套装！）</li><li>noindent是过时选项，什么也不做。</li><li>禁用段首缩进的姿势是原书中是为了配合beamer文档类，而在新版本的 CTeX 宏集中，已经做过了一些处理，可以直接用</li></ul><p>作者：stone-zeng 链接：<a href="https://www.zhihu.com/question/369080188/answer/1004059397">https://www.zhihu.com/question/369080188/answer/1004059397</a></p><h2><span id="color"> color</span><a href="#color" class="header-anchor">#</a></h2><blockquote><p><a href="https://latex-tutorial.com/color-latex/">https://latex-tutorial.com/color-latex/</a></p></blockquote><ul><li>The main tool to work with colors in LaTeX is the <code>xcolor</code> package. This package, written by Dr. Uwe Kern, is built on top of the color package (and thus the x at the beginning, which stands for extended) which provides a stable tool for handling colors within LaTeX in a consistent and driver independent way, supporting several color models.</li><li>The simplest command to change the color of elements in the LaTeX document is <code>\color&#123;color&#125;</code>. This command switches the color for the current group in which the command is inserted.</li><li><code>\textcolor&#123;color&#125;&#123;text&#125;</code> equals <code>&#123;\color&#123;color&#125; text&#125;</code></li></ul><h3><span id="how-do-you-color-a-page-in-latex"> How do you color a page in latex?</span><a href="#how-do-you-color-a-page-in-latex" class="header-anchor">#</a></h3><ul><li>change the background color of our LaTeX document using <code>\pagecolor&#123;color&#125;</code>.<ul><li>This declaration will set the color for the current and following pages; it is a global declaration, and it does not respect groups.</li></ul></li><li>The <code>\nopagecolor</code> command is used to remove any currently specified page color, returning thus to the default transparent background.</li></ul><h3><span id="how-do-i-make-a-colored-box-in-latex"> How do I make a colored box in latex?</span><a href="#how-do-i-make-a-colored-box-in-latex" class="header-anchor">#</a></h3><ul><li>To produce a box with a certain background color, the macro <code>\colorbox&#123;color&#125;&#123;text&#125;</code> is provided.</li><li>We can also produce a framed box with <code>\fcolorbox&#123;frame color&#125;&#123;background color&#125;&#123;text&#125;</code>, where:<ul><li>frame color: specifies the color of the frame around the box,</li><li>background color: the color of the background and text the text to be typeset inside the box.</li></ul></li></ul><h3><span id="predefined-colors"> predefined colors</span><a href="#predefined-colors" class="header-anchor">#</a></h3><p>predefined colors in LaTeX are: <code>red, green, blue, cyan, magenta, yellow, black, gray, white, darkgray, lightgray, brown, lime, olive, orange, pink, purple, teal, violet</code>.</p><h3><span id="how-to-define-custom-colors-in-latex"> How to define custom colors in LaTeX</span><a href="#how-to-define-custom-colors-in-latex" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\definecolor&#123;name&#125;&#123;model&#125;&#123;spec&#125;</span><br></pre></td></tr></table></figure><ul><li>The most common <code>models</code> and their specification syntax are the following:<ul><li>rgb: Is specified as three comma-separated values between 0 and 1 that represent the amount of red, green and blue (in this order) that the color has.</li><li>RGB: The same as before but with the values going between 0 and 255.</li><li>cmyk: Is specified as four comma-separated values between 0 and 1 that determine the amount of cyan, magenta, yellow and black (in this order) to be added using the additive model in most printers.</li><li>gray: A value in the grey scale between 0 and 1.</li><li>HTML: Consists of 6 hexadecimal digits that represent the color in HTML code.</li><li>wave: This is a fun one that may be useful when writing documents related to the field of Optics. It is a single number between 363 and 814 that specifies the wave length of the color in nanometres.</li></ul></li><li>With this command, if the color name passed is an already existing one, it will be overwritten. To prevent this we can use the <code>\providecolor</code> command, which takes the same arguments but only makes the definition valid if the color doesn’t exist already.</li></ul><h3><span id="how-to-change-the-color-of-links"> How to change the color of links?</span><a href="#how-to-change-the-color-of-links" class="header-anchor">#</a></h3><ul><li>The most used tool when dealing with links and references inside LaTeX documents is the <code>hyperref</code> package<ul><li>This package automatically creates hyperlinks for the table of contents, for the cites of the bibliography, and for the references to floating objects. It also provides a series of tools to create your own anchors and hyperlinks.</li></ul></li><li>By default, this package prints colored frames around the hyperlinks. However, one common package option is <code>colorlinks=true</code>, which instead of printing frames simply changes the typesetting color; this means that a hyperlink will be written using a different color than the ordinary text.</li><li>Furthermore, every kind of link has its option to change the color used:<ul><li>linkcolor: Color used for normal internal links (mainly the links in the table of contents and the references to figures and tables). The default value is red.</li><li>citecolor: Color for bibliographical citations in text. The default value is green.</li><li>filecolor: Color for URLs that open local files. The default value is cyan</li><li>menucolor: Color for Acrobat menu items. The default value is red.</li><li>runcolor: Color for run links. The default value is the same as filecolor.</li><li>urlcolor: Color for linked URLs. The default value is magenta.</li><li>anchorcolor: Color for anchor text. The default value is black, since it is ignored by most drivers.</li><li>allcolors: Color for all the options previously described.</li></ul></li></ul><h2><span id="zhu-ti-pei-se"> 主题配色</span><a href="#zhu-ti-pei-se" class="header-anchor">#</a></h2><ul><li>beamer 模板主题通常由 theme，outertheme，innertheme，colortheme 构成。<ul><li>theme 是整体的主题，起一个统筹的作用</li><li>outertheme 控制普通页面（frame）的结构和框架</li><li>innertheme用来调整标题页，小节页的组成，也会用来控制普通页面内一些特殊结构的样式（比如脚注、列表、表格等）</li><li>colortheme <strong>就是整体模板的配色了</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode extensions</title>
      <link href="/2025/01/07/vscode-extensions/"/>
      <url>/2025/01/07/vscode-extensions/</url>
      
        <content type="html"><![CDATA[<h2><span id="install"> install</span><a href="#install" class="header-anchor">#</a></h2><p>(Mac) To enable key-repeating, execute the following in your Terminal, log out and back in, and then restart VS Code:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span>              <span class="comment"># For VS Code</span></span><br><span class="line">defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span>      <span class="comment"># For VS Code Insider</span></span><br><span class="line">defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool <span class="literal">false</span>         <span class="comment"># For VS Codium</span></span><br><span class="line">defaults write com.microsoft.VSCodeExploration ApplePressAndHoldEnabled -bool <span class="literal">false</span>   <span class="comment"># For VS Codium Exploration users</span></span><br><span class="line">defaults delete -g ApplePressAndHoldEnabled                                           <span class="comment"># If necessary, reset global default</span></span><br></pre></td></tr></table></figure><p>We also recommend increasing Key Repeat and Delay Until Repeat settings in <em>System Preferences -&gt; Keyboard</em></p><h2><span id="base-shortcuts"> base shortcuts</span><a href="#base-shortcuts" class="header-anchor">#</a></h2><ul><li>Use  to move back one word <code>b</code></li><li>Use  to move forward one word <code>w</code></li><li>Use  to move end of word <code>e</code></li><li><code>&lt;leader&gt;m</code> to add a bookmark and <code>&lt;leader&gt;b</code> to open the list of all bookmarks (using the <a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks">Bookmarks</a> extension):</li><li><code>&lt;leader&gt;w</code> to save the current file</li><li>Bind <code>&gt;</code> and <code>&lt;</code> in visual mode to indent/outdent lines (repeatable):</li><li>multi curse<ul><li><code>gb</code> or <code>cmd+d</code> It adds another cursor at the next word that matches the word the cursor is currently on.</li><li>VS Code Vim treats multi-cursor mode as a variant of <strong>Visual Mode</strong>, so you need to use Visual Mode keybindings to perform multi-cursor actions, such as:<ul><li><code>Shift + i</code> - Move to beginning of selection and enter Insert Mode</li><li><code>Shift + a</code> - Move to end of selection and enter Insert Mode</li><li><code>s</code> or <code>c</code> - Delete word and enter Insert Mode</li></ul></li><li>Each cursor has its own clipboard.</li><li>Pressing Escape in Multi-Cursor Visual Mode will bring you to Multi-Cursor Normal mode. Pressing it again will return you to Normal mod</li></ul></li></ul><h2><span id="easymotion"> EasyMotion</span><a href="#easymotion" class="header-anchor">#</a></h2><table><thead><tr><th><code>&lt;leader&gt;&lt;leader&gt; j</code></th><th>Start of line forwards</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;&lt;leader&gt; k</code></td><td>Start of line backwards</td></tr></tbody></table><table><thead><tr><th><code>&lt;leader&gt;&lt;leader&gt; s &lt;char&gt;</code></th><th>Search character</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;&lt;leader&gt; f &lt;char&gt;</code></td><td>Find character forwards</td></tr><tr><td><code>&lt;leader&gt;&lt;leader&gt; F &lt;char&gt;</code></td><td>Find character backwards</td></tr><tr><td></td><td></td></tr></tbody></table><table><thead><tr><th><code>&lt;leader&gt;&lt;leader&gt; w</code></th><th>Start of word forwards</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;&lt;leader&gt; b</code></td><td>Start of word backwards</td></tr></tbody></table><h2><span id="camelcasemotion"> CamelCaseMotion</span><a href="#camelcasemotion" class="header-anchor">#</a></h2><blockquote><p><a href="https://github.com/bkad/CamelCaseMotion">https://github.com/bkad/CamelCaseMotion</a></p></blockquote><p>This script defines motions similar to <strong><code>w, b, e</code></strong> which do not move <strong>word-wise</strong> (forward/backward), but <strong>Camel-wise</strong>; i.e. to word boundaries and uppercase letters.</p><hr><h2><span id="easymotion"> EasyMotion</span><a href="#easymotion" class="header-anchor">#</a></h2><h2><span id="surround"> Surround</span><a href="#surround" class="header-anchor">#</a></h2><blockquote><p><a href="https://github.com/tpope/vim-surround">https://github.com/tpope/vim-surround</a></p></blockquote><p><strong>Surround.vim</strong> is all about “surroundings”: parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.</p><ul><li><code>cs</code>: change</li><li><code>ds</code>: delete</li><li><code>ysiw</code>: word</li><li><code>yss</code>: sentence</li><li><code>S</code>: visual block</li><li>The <code>.</code> command will work with <code>ds</code>, <code>cs</code>, and <code>yss</code> if you install <code>repeat.vim</code>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch 学习笔记</title>
      <link href="/2025/01/05/pytorch-note/"/>
      <url>/2025/01/05/pytorch-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="tensors"> TENSORS</span><a href="#tensors" class="header-anchor">#</a></h2><ul><li>In PyTorch, we use <code>tensors</code> to encode the inputs and outputs of a model, as well as the model’s parameters.</li><li>Tensors are also <strong>optimized for automatic differentiation</strong></li><li>construct<ul><li>directly: <code>torch.tensor(data)</code></li><li>from numpy: <code>torch.from_numpy(data)</code></li><li>from other tensor: <code>torch.one_like(data)</code>,<code>torch.rand_like(data)</code></li><li>with random or constant values: <code>torch.rand(shape)</code>,<code>troch.ones(shape)</code></li></ul></li><li>attributes<ul><li><code>tensor.shape</code></li><li><code>tensor.dtype</code></li><li><code>tensor.device</code></li></ul></li><li>operations<ul><li><code>tensor.to(device)</code></li><li>numpy-like indexing and slicing</li><li>jointing<ul><li><code>t1 = torch.cat([tensor1, tensor2, tensor3], dim=1)</code></li><li><code>torch.stack()</code></li></ul></li></ul></li><li><strong>Tensors on the CPU and NumPy arrays can share their underlying memory locations, and changing one will change the other.</strong></li></ul><h2><span id="working-with-data"> Working with data</span><a href="#working-with-data" class="header-anchor">#</a></h2><ul><li>PyTorch has two <a href="https://pytorch.org/docs/stable/data.html">primitives to work with data</a>:<ul><li><code>torch.utils.data.Dataset</code> : <code>Dataset</code>stores the samples and their corresponding labels<ul><li><code>root</code> is the path where the train/test data is stored,</li><li><code>train</code> specifies training or test dataset,</li><li><code>download=True</code> downloads the data from the internet if it’s not available at <code>root</code>.</li><li><code>transform</code> and <code>target_transform</code> specify the feature and label transformations</li></ul></li><li><code>torch.utils.data.DataLoader</code>.  <code>DataLoader</code> wraps an iterable around the <code>Dataset</code>.</li></ul></li><li>PyTorch offers domain-specific libraries such as <a href="https://pytorch.org/text/stable/index.html">TorchText</a>, <a href="https://pytorch.org/vision/stable/index.html">TorchVision</a>, and <a href="https://pytorch.org/audio/stable/index.html">TorchAudio</a>, all of which include datasets</li><li>We pass the <code>Dataset</code> as an argument to <code>DataLoader</code>. This wraps an iterable over our dataset, and supports automatic batching, sampling, shuffling and multiprocess data loading.</li><li>We can index <code>Datasets</code> manually like a list: <code>training_data[index]</code></li></ul><h3><span id="dataloader"> Dataloader</span><a href="#dataloader" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataLoader(dataset, batch_size=<span class="number">1</span>, shuffle=<span class="literal">False</span>, sampler=<span class="literal">None</span>,</span><br><span class="line">           batch_sampler=<span class="literal">None</span>, num_workers=<span class="number">0</span>, collate_fn=<span class="literal">None</span>,</span><br><span class="line">           pin_memory=<span class="literal">False</span>, drop_last=<span class="literal">False</span>, timeout=<span class="number">0</span>,</span><br><span class="line">           worker_init_fn=<span class="literal">None</span>, *, prefetch_factor=<span class="number">2</span>,</span><br><span class="line">           persistent_workers=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>PyTorch supports two different types of datasets:<ul><li><a href="https://pytorch.org/docs/stable/data.html#map-style-datasets">**map-style datasets</a>,**</li><li><a href="https://pytorch.org/docs/stable/data.html#iterable-style-datasets">**iterable-style datasets</a>.**</li></ul></li><li>Map-style datasets<ul><li>A map-style dataset is one that implements the <code>__getitem__()</code> and <code>__len__()</code> protocols, and represents a map from (possibly non-integral) indices/keys to data samples.</li><li>For example, such a dataset, when accessed with <code>dataset[idx]</code>, could read the <code>idx</code>-th image and its corresponding label from a folder on the disk.</li></ul></li><li>Iterable-style datasets<ul><li>An iterable-style dataset is an instance of a subclass of <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset"><code>IterableDataset</code></a> that implements the <code>__iter__()</code> protocol, and represents an iterable over data samples. This type of datasets is particularly suitable for cases where random reads are expensive or even improbable, and where the batch size depends on the fetched data.</li><li>For example, such a dataset, when called <code>iter(dataset)</code>, could return a stream of data reading from a database, a remote server, or even logs generated in real time.</li></ul></li><li><strong>When using an <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset"><code>IterableDataset</code></a> with <a href="https://pytorch.org/docs/stable/data.html#multi-process-data-loading">multi-process data loading</a>. The same dataset object is replicated on each worker process, and thus the replicas must be configured differently to avoid duplicated data. See <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset"><code>IterableDataset</code></a>documentations for how to achieve this.</strong></li></ul><h2><span id="creating-models"> Creating models</span><a href="#creating-models" class="header-anchor">#</a></h2><ul><li>To define a neural network in PyTorch, we create a class that inherits from <a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html">nn.Module</a>. We define the layers of the network in the <code>__init__</code> function and specify how data will pass through the network in the <code>forward</code> function. To accelerate operations in the neural network, we move it to the GPU if available.</li></ul><h2><span id="optimizing-the-model-parameters"> Optimizing the Model Parameters</span><a href="#optimizing-the-model-parameters" class="header-anchor">#</a></h2><ul><li>To train a model, we need a <a href="https://pytorch.org/docs/stable/nn.html#loss-functions">loss function</a> and an <a href="https://pytorch.org/docs/stable/optim.html">optimizer</a>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sklearn 学习笔记</title>
      <link href="/2025/01/05/sklearn-note/"/>
      <url>/2025/01/05/sklearn-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="base"> base</span><a href="#base" class="header-anchor">#</a></h2><ul><li>the main API implemented by <code>scikit-learn</code> is that of the <code>estimator</code>.<ul><li>An estimator is any object that learns from data; it may be a classification, regression or clustering algorithm or a transformer that extracts/filters useful features from raw data.</li><li>All <code>estimator</code> objects expose a <code>fit</code> method that takes a dataset (usually a 2-d array)</li><li>All the parameters of an estimator can be set when it is instantiated or by modifying the corresponding attribute:</li><li>All the <strong>estimated parameters</strong> are attributes of the estimator object <strong>ending by an underscore</strong>:</li><li>Two generic approaches to parameter search are provided in scikit-learn:<ul><li>for given values, <code>GridSearchCV</code> exhaustively considers all parameter combinations,</li><li>while <code>RandomizedSearchCV</code> can sample a given number of candidates from a parameter space with a specified distribution.<ul><li>use <code>scipy.stats</code> module</li><li><code>loguniform()</code></li></ul></li><li>Both these tools have successive halving counterparts <code>HalvingGridSearchCV</code> and <code>HalvingRandomSearchCV</code>, which can be much faster at finding a good parameter combination.</li></ul></li></ul></li><li>It is possible to save a model in scikit-learn by using Python’s built-in persistence model, <code>pickle</code></li><li>In the specific case of <code>scikit-learn</code>, it may be more interesting to use joblib’s replacement for pickle (<code>joblib.dump &amp; joblib.load</code>), which is more efficient on big data but it can only pickle to the disk and not to a string:</li><li>Unless otherwise specified, input will be cast to <code>float64</code></li><li>Regression <strong>targets</strong> are cast to <code>float64</code> and classification targets are maintained</li></ul><h2><span id="cross-validaiton-base"> cross-validaiton base</span><a href="#cross-validaiton-base" class="header-anchor">#</a></h2><ul><li>train/test split:<ul><li><code>sklearn.model_selection.train_test_split()</code></li></ul></li><li>Computing cross-validated metrics:<ul><li><code>sklearn.model_selection.cross_val_score()</code><ul><li>n_jobs = -1</li><li>cv = ShuffleSplit(n_splits=5, test_size=0.3, random_state=0)</li><li>cv = custom_cv_2folds</li></ul></li><li><code>sklearn.model_selection.cross_validate()</code></li><li><code>sklearn.model_selection.cross_val_predict()</code></li></ul></li></ul><h2><span id="corss-validation-data-split"> corss-validation data split</span><a href="#corss-validation-data-split" class="header-anchor">#</a></h2><ul><li><code>sklearn.model_selection.KFold()</code></li><li><code>sklearn.model_selection.RepeatedKFold()</code></li><li><code>sklearn.model_selection.LeaveOneOut()</code></li><li><code>sklearn.model_selection.LeavePOut()</code></li><li><code>sklearn.model_selection.ShuffleSplit()</code></li><li><code>sklearn.model_selection.StratifiedKFold()</code></li><li><code>sklearn.model_selection.GroupKFold()</code></li><li><code>sklearn.model_selection.LeaveOneGroupOut()</code></li><li><code>sklearn.model_selection.LeavePGroupOut()</code></li><li><code>sklearn.model_selection.PredefinedSplit()</code></li><li><code>sklearn.model_selection.TimeSeriesSplit()</code></li></ul><h2><span id="tuning-the-hyper-parameters"> Tuning the hyper-parameters</span><a href="#tuning-the-hyper-parameters" class="header-anchor">#</a></h2><ul><li>to find the names and current values for all parameters for a given estimator, use: <code>estimator.get_params()</code></li><li>A <strong>search</strong> consists of:<ul><li>an estimator (regressor or classifier such as sklearn.svm.SVC());</li><li>a parameter space;</li><li>a method for searching or sampling candidates;</li><li>a cross-validation scheme; and</li><li>a score function.</li></ul></li><li>exhaustively: <code>GridSearchCV</code></li><li>Randomized: <code>RandomizedSearchCV</code><ul><li>For each parameter, either <strong>a distribution over possible values</strong> or a list of discrete choices (which will be sampled uniformly) can be specified:</li><li><code>&#123;'C': scipy.stats.expon(scale=100), 'gamma': scipy.stats.expon(scale=.1), 'kernel': ['rbf'], 'class_weight':['balanced', None]&#125;</code></li></ul></li><li>default <code>score</code> function:<ul><li><code>sklearn.metrics.accuracy_score</code> for classification</li><li><code>sklearn.metrics.r2_score</code> for regression.</li></ul></li><li>Parallelism: <code>n_jobs=-1</code> in <code>GridSearchCV</code> and <code>RandomizedSearchCV</code></li><li>Robustness to failure: error_score=0 (or =np.NaN)</li><li>Model specific cross-validation:</li></ul><h2><span id="matrics-and-scoring"> matrics and scoring</span><a href="#matrics-and-scoring" class="header-anchor">#</a></h2><ul><li>functions ending with <code>_score</code> return a value to maximize, the higher the better.</li><li>functions ending with <code>_error</code> or <code>_loss</code> return a value to minimize, the lower the better. When converting into a scorer object using <code>make_scorer</code>, set the <code>greater_is_better</code> parameter to <code>False</code></li></ul><h2><span id="best-practices"> best practices</span><a href="#best-practices" class="header-anchor">#</a></h2><ul><li><code>from sklearn.dummy import DummyClassifier</code></li><li>suffle<ul><li>If the <strong>data ordering</strong> is not arbitrary (e.g. samples with the same class label are contiguous), <strong>shuffling it first</strong> may be essential to get a <strong>meaningful cross-validation</strong> result. However, the opposite may be true if the samples are not independently and identically distributed.</li><li>some cross validation iterators, such as KFold, have an inbuilt option to shuffle the data indices before splitting them.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> sklearn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rasterio 学习笔记</title>
      <link href="/2025/01/05/rasterio-note/"/>
      <url>/2025/01/05/rasterio-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="dataset-geo-referencing"> dataset geo referencing</span><a href="#dataset-geo-referencing" class="header-anchor">#</a></h2><ul><li>A dataset’s <code>transform</code> is an affine transformation matrix that maps pixel localions in <code>(row, col)</code> coordinates to <code>(x, y)</code> spatial positions.<ul><li><code>x,y = src.transform * (src.width, src.height)</code></li><li>the above <code>x, y</code> means the coordinate values relative to the origin of the the dataset’s coordinate reference system</li><li>Pixel coord to spatial coord <code>x, y = src.xy(row, col)</code></li><li>Spatial coord to pixel coord <code>row, col = src.index(x, y)</code></li></ul></li><li>Geo-referenced raster datasets use affine transformations to map from image coordinates to world coordinates.</li><li>Between the <code>DatasetReader.crs</code> and <code>DatasetReader.transform</code> attributes, the geo-referencing of a raster dataset is described and the dataset can compared to other GIS datasets.</li><li>The <code>affine.Affine.from_gdal()</code> class method helps convert GDAL GeoTransform, sequences of 6 numbers in which the first and fourth are the x and y offsets and the second and sixth are the x and y pixel sizes.</li></ul><p><img src="demo_affine.png" alt="demo of affine transformation"></p><h2><span id="windows"> Windows</span><a href="#windows" class="header-anchor">#</a></h2><ul><li>A <code>window</code> is a view onto a rectangular subset of a raster dataset and is described in <code>rasterio</code> by <strong>column and row offsets and width and height in pixels</strong>. These may be ints or floats.</li><li>The affine transform of a window can be accessed using a dataset’s <code>window_transform</code> method:</li></ul><h2><span id="important-attributes"> Important attributes</span><a href="#important-attributes" class="header-anchor">#</a></h2><ul><li><code>ds.mode</code></li><li><code>ds.closed</code></li><li><code>ds.name</code></li><li><code>ds.count</code></li><li><code>ds.width</code></li><li><code>ds.transform</code></li><li><code>ds.bounds</code></li><li><code>ds.crs</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;i: dtype <span class="keyword">for</span> i, dtype <span class="keyword">in</span> <span class="built_in">zip</span>(dataset.indexes, dataset.dtypes)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> remote-sensing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> rasterio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xarray&amp;rioxarry 学习笔记</title>
      <link href="/2025/01/05/rioxarry-note/"/>
      <url>/2025/01/05/rioxarry-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="rioxarray-base"> rioxarray base</span><a href="#rioxarray-base" class="header-anchor">#</a></h2><ul><li><code>rioxarry</code> extends <code>xarray</code> with the <code>rio</code> accessor.</li><li>Operations on xarray objects can cause data loss. Due to this, <code>rioxarray</code> writes and expects the spatial reference information to exist in the coordinates.</li><li><code>ds.rio.crs</code></li><li><code>ds.rio.write_crs(&quot;epsg:32649&quot;, inplace=True)</code></li><li><code>ds.rio.transform()</code></li><li><code>ds.rio.write_transform(transform, inplace=True)</code></li><li><code>ds.rio.nodata</code></li><li><code>ds.rio.write_nodata()</code></li><li><code>ds.rio.update_attrs()</code></li><li><code>ds.rio.update_encoding()</code></li><li><code>ds.rio.to_raster()</code></li><li><code>rasterio.crs.CRS.from_user_input()</code></li></ul><h2><span id="xarray-base"> xarray base</span><a href="#xarray-base" class="header-anchor">#</a></h2><ul><li><code>DataArray</code>: A multi-dimensional array with <strong>labeled or named</strong> dimensions. <code>DataArray</code> objects add <code>metadata</code> such as <strong>dimension names</strong>, <strong>coordinates</strong>, and <strong>attributes</strong> to underlying “unlabeled” data structures such as <code>numpy</code> and <code>Dask</code> arrays. If its optional name property is set, it is a named DataArray.</li><li><code>Dataset</code>: A <strong>dict-like</strong> collection of <code>DataArray</code> objects with aligned dimensions. Thus, most operations that can be performed on the dimensions of a single DataArray can be performed on a dataset. Datasets have data variables (see Variable below), dimensions, coordinates, and attributes.</li></ul><h2><span id="dataarray"> DataArray</span><a href="#dataarray" class="header-anchor">#</a></h2><h3><span id="construct"> construct</span><a href="#construct" class="header-anchor">#</a></h3><p>The <a href="https://docs.xarray.dev/en/stable/generated/xarray.DataArray.html#xarray.DataArray"><strong><code>DataArray</code></strong></a> constructor takes:</p><ul><li><code>data</code>: a multi-dimensional array of values</li><li><code>coords</code>: a list or dictionary of coordinates. If a list, it should be a list of tuples where the first element is the dimension name and the second element is the corresponding coordinate array_like object.</li><li><code>dims</code>: a list of dimension names. If omitted and <code>coords</code> is a list of tuples, dimension names are taken from <code>coords</code>.</li><li><code>attrs</code>: a dictionary of attributes to add to the instance</li><li><code>name</code>: a string that names the instance</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = xr.DataArray(np.random.randn(<span class="number">2</span>, <span class="number">3</span>), dims=(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>), coords=&#123;<span class="string">&quot;x&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>]&#125;)</span><br></pre></td></tr></table></figure><hr><h3><span id="key-properties"> key properties:</span><a href="#key-properties" class="header-anchor">#</a></h3><ul><li><code>values</code>: a <a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray"><strong><code>numpy.ndarray</code></strong></a> holding the array’s values</li><li><code>dims</code>: dimension names for each axis (e.g., <code>('x', 'y', 'z')</code>)</li><li><code>coords</code>: a dict-like container of arrays (<em>coordinates</em>) that label each point (e.g., 1-dimensional arrays of numbers, datetime objects or strings)</li><li><code>attrs</code>: <a href="https://docs.python.org/3/library/stdtypes.html#dict"><strong><code>dict</code></strong></a> to hold arbitrary metadata (<em>attributes</em>)</li></ul><hr><h3><span id="indexing"> indexing</span><a href="#indexing" class="header-anchor">#</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>,:]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.loc[<span class="number">10</span>] <span class="comment"># &quot;10&quot; is one of x label</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.isel(x=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.sel(x=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3><span id="computation"> computation</span><a href="#computation" class="header-anchor">#</a></h3><p>aggregation operations can use dimension names instead of axis numbers</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.mean(dim=<span class="string">&quot;x&quot;</span>)</span><br></pre></td></tr></table></figure><p>Arithmetic operations <strong>broadcast based on dimension name</strong>. This means you don’t need to insert dummy dimensions for alignment</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = xr.DataArray(np.random.randn(<span class="number">3</span>), [data.coords[<span class="string">&quot;y&quot;</span>]])</span><br><span class="line"></span><br><span class="line">b = xr.DataArray(np.random.randn(<span class="number">4</span>), dims=<span class="string">&quot;z&quot;</span>)</span><br><span class="line"></span><br><span class="line">a + b</span><br></pre></td></tr></table></figure><p>It also means that in most cases you do not need to worry about the order of dimensions</p><p>Operations also align based on index labels:</p><h2><span id="dataset"> Dataset</span><a href="#dataset" class="header-anchor">#</a></h2><ul><li>The power of the <code>dataset</code> over a plain dictionary is that, in addition to pulling out arrays by name, it is possible to select or combine data along a dimension across all arrays simultaneously. Like a <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html#pandas.DataFrame"><strong><code>DataFrame</code></strong></a></li><li><code>datasets</code> facilitate array operations with heterogeneous data – the difference is that the arrays in a dataset can have not only different data types, but also different numbers of dimensions.</li><li>This data model is borrowed from the <code>netCDF</code> file format, which also provides <code>xarray</code> with a natural and portable serialization format.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> remote sensing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> rioxarry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib 学习笔记</title>
      <link href="/2025/01/05/matplotlib-note/"/>
      <url>/2025/01/05/matplotlib-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="base"> base</span><a href="#base" class="header-anchor">#</a></h2><ul><li>The <code>Axes</code> class and it’s member functions are <strong>the primary entry point</strong> to working with the <code>OO</code> interface.</li><li>All of plotting functions expect <code>np.array</code> or <code>np.ma.masked_array</code> as input.<ul><li>Classes that are ‘array-like’ such as <code>pandas</code> data objects and <code>np.matrix</code> may or may not work as intended.</li><li>It is best to convert these to <code>np.array</code> objects prior to plotting.</li></ul></li><li>For functions in the <code>pyplot</code> module, there is always a “current” figure and axes (which is created automatically on request).<ul><li>get current axes in pyplot: <code>ax = plt.gca()</code></li></ul></li><li><code>pyplot</code><ul><li>For every <code>x, y</code> pair of arguments, there is an optional third argument which is the format string that indicates the color and line type of the plot.</li><li>to get a list of settable line properties, call the setp() function with a line or lines as argument</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_plotter</span>(<span class="params">ax, data1, data2, param_dict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    A helper function to make a graph</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    ax : Axes</span></span><br><span class="line"><span class="string">        The axes to draw to</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    data1 : array</span></span><br><span class="line"><span class="string">       The x data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    data2 : array</span></span><br><span class="line"><span class="string">       The y data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    param_dict : dict</span></span><br><span class="line"><span class="string">       Dictionary of kwargs to pass to ax.plot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    out : list</span></span><br><span class="line"><span class="string">        list of artists added</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    out = ax.plot(data1, data2, **param_dict)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">data1, data2, data3, data4 = np.random.randn(<span class="number">4</span>, <span class="number">100</span>)</span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">my_plotter(ax1, data1, data2, &#123;<span class="string">&#x27;marker&#x27;</span>: <span class="string">&#x27;x&#x27;</span>&#125;)</span><br><span class="line">my_plotter(ax2, data3, data4, &#123;<span class="string">&#x27;marker&#x27;</span>: <span class="string">&#x27;o&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>ipympl Agg</strong> rendering embedded in a Jupyter widget. (requires <code>ipympl</code>). This backend can be enabled in a Jupyter notebook with <code>%matplotlib ipympl</code>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install ipympl</span><br><span class="line">jupyter nbextension enable --py --sys-prefix ipympl</span><br></pre></td></tr></table></figure><h2><span id="oop"> oop</span><a href="#oop" class="header-anchor">#</a></h2><ul><li>Matplotlib has two interfaces.<ul><li>The first is an object-oriented (OO) interface. In this case, we utilize an instance of <a href="https://matplotlib.org/stable/api/axes_api.html#matplotlib.axes.Axes"><code>axes.Axes</code></a> in order to render visualizations on an instance of <a href="https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure"><code>figure.Figure</code></a>.</li><li>The second is based on MATLAB and uses a state-based interface. This is encapsulated in the <a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.html#module-matplotlib.pyplot"><code>pyplot</code></a>module. See the <a href="https://matplotlib.org/stable/tutorials/introductory/pyplot.html">pyplot tutorials</a> for a more in-depth look at the pyplot interface</li></ul></li><li>we first generate an instance of <a href="https://matplotlib.org/stable/api/figure_api.html#matplotlib.figure.Figure"><code>figure.Figure</code></a> and <a href="https://matplotlib.org/stable/api/axes_api.html#matplotlib.axes.Axes"><code>axes.Axes</code></a>. The Figure is like a canvas, and the Axes is a part of that canvas on which we will make a particular visualization.</li><li><code>fig, ax = plt.subplots()</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> matplotlib </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas 学习笔记</title>
      <link href="/2025/01/05/pandas-note/"/>
      <url>/2025/01/05/pandas-note/</url>
      
        <content type="html"><![CDATA[<h2><span id="base"> base</span><a href="#base" class="header-anchor">#</a></h2><ul><li>Here is a basic tenet to keep in mind: <strong>data alignment is intrinsic</strong>. The link between labels and data will not be broken unless done so explicitly by you.</li><li>All <code>pandas</code> data structures are value-mutable (the values they contain can be altered) but not always size-mutable.</li><li>The length of a <code>Series</code> cannot be changed, but, for example, columns can be inserted into a <code>DataFrame</code>.</li><li><strong>However, the vast majority of methods produce new objects and leave the input data untouched.</strong><ul><li>In general we like to favor immutability where sensible.</li></ul></li><li>Pandas objects (<code>Index, Series, DataFrame</code>) can be thought of as <strong>containers</strong> for arrays, which hold the actual data and do the actual computation. For many types, the underlying array is a <code>numpy.ndarray</code>. However, pandas and 3rd party libraries may extend NumPy’s type system to add support for custom arrays (see dtypes). <strong>To get the actual data inside a <code>Index</code> or <code>Series</code>, use the <code>.array</code> property</strong>.</li><li><strong>If you know you need a <code>NumPy</code>array, use <code>to_numpy()</code> or <code>numpy.asarray()</code></strong>.</li><li><code>pandas</code>has support for accelerating certain types of binary numerical and boolean operations using the <code>numexpr</code> library and the <code>bottleneck</code> libraries. You are highly encouraged to install both libraries.</li><li><code>Series</code>and <code>DataFrame</code>have the binary comparison methods <code>eq, ne, lt, gt, le</code>, and <code>ge</code> whose behavior is analogous to the binary arithmetic operations described above:</li><li>You can apply the reductions: <code>empty(), any(), all(), and bool()</code> to provide a way to summarize a boolean result.</li><li><code>equals()</code> method for testing equality (Note that the <code>Series</code>or <code>DataFrame</code>index needs to be in the same order for equality to be True: <code>df1.equals(df2.sort_index())</code>)</li><li>the <code>drop()</code> function. It removes a set of labels from an axis:</li><li>Series is equipped with a set of <strong>string processing methods</strong> that make it easy to operate on each element of the array.<ul><li>Perhaps most importantly, these methods <strong>exclude missing/NA values</strong> automatically.</li><li>These are accessed via the Series’s <code>str</code> attribute and generally have names matching the equivalent (scalar) built-in string methods.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df.at[]</span><br><span class="line">df.iat[]</span><br><span class="line">df.loc[]</span><br><span class="line">df.iloc[]</span><br><span class="line">df.A</span><br><span class="line">df.columns</span><br><span class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">df.sort_values(by=<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">df.idxmax()</span><br><span class="line">df.idxmin()</span><br><span class="line">df.select_dtypes(include=[<span class="built_in">bool</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">7</span>])</span><br><span class="line">dates = pd.date_range(<span class="string">&#x27;20130101&#x27;</span>, periods = <span class="number">6</span>)</span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>, <span class="number">4</span>), index=dates, columns=<span class="built_in">list</span>(<span class="string">&#x27;ABCD&#x27;</span>))</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: df2 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: <span class="number">1.</span>,</span><br><span class="line">   ...:                     <span class="string">&#x27;B&#x27;</span>: pd.Timestamp(<span class="string">&#x27;20130102&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;C&#x27;</span>: pd.Series(<span class="number">1</span>, index=<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>)), dtype=<span class="string">&#x27;float32&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;D&#x27;</span>: np.array([<span class="number">3</span>] * <span class="number">4</span>, dtype=<span class="string">&#x27;int32&#x27;</span>),</span><br><span class="line">   ...:                     <span class="string">&#x27;E&#x27;</span>: pd.Categorical([<span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;train&quot;</span>]),</span><br><span class="line">   ...:                     <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: df2</span><br><span class="line">Out[<span class="number">10</span>]:</span><br><span class="line">     A          B    C  D      E    F</span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</span><br><span class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</span><br><span class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2013</span>-01-02  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df2.A  <span class="comment"># &#x27;A&#x27; column name</span></span><br><span class="line"></span><br><span class="line">df2.index</span><br><span class="line">df2.columns</span><br><span class="line">df2.describe()</span><br><span class="line">df2.T</span><br><span class="line">df.sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">df.sort_values(by=<span class="string">&#x27;B&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><code>DataFrame.to_numpy()</code> gives a <code>NumPy</code> representation of the underlying data. Note that this can be an expensive operation when your DataFrame has columns with different data types, which comes down to a fundamental difference between pandas and NumPy: NumPy arrays have one dtype for the entire array, while pandas DataFrames have one dtype per column. When you call <code>DataFrame.to_numpy()</code>, pandas will find the NumPy dtype that can hold all of the dtypes in the DataFrame. This may end up being object, which requires casting every value to a Python object.</li><li>While standard Python / Numpy expressions for selecting and setting are intuitive and come in handy for interactive work, for production code, we recommend the optimized pandas data access methods, <code>.at, .iat, .loc</code> and <code>.iloc</code>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">df[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">df[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>]</span><br></pre></td></tr></table></figure><ol><li>Selection by label</li></ol><ul><li><strong>Note that contrary to usual python slices, both the start and the stop are included</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">df.loc[dates[<span class="number">0</span>]]</span><br><span class="line">df.loc[<span class="string">&#x27;20130102&#x27;</span>:<span class="string">&#x27;20130104&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]]</span><br><span class="line">df.loc[<span class="string">&#x27;20130102&#x27;</span>, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]] <span class="comment"># Reduction in the dimensions of the returned object:</span></span><br><span class="line">df.loc[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure><ol><li>For getting fast access to a scalar (equivalent to the prior method):</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>]</span><br></pre></td></tr></table></figure><ol><li>Selection by position</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">3</span>]</span><br><span class="line">df.iloc[<span class="number">3</span>:<span class="number">5</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">df.iloc[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">2</span>]]</span><br></pre></td></tr></table></figure><ol><li>Boolean indexing</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df[df.A &gt; <span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df2 = df.copy()</span><br><span class="line">df2[<span class="string">&#x27;E&#x27;</span>] = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;four&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line">df2[df2[<span class="string">&#x27;E&#x27;</span>].isin([<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;four&#x27;</span>])]</span><br></pre></td></tr></table></figure><ul><li>Setting a new column automatically aligns the data by the indexes.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=pd.date_range(<span class="string">&#x27;20130102&#x27;</span>, periods=<span class="number">6</span>))</span><br><span class="line">df[<span class="string">&#x27;F&#x27;</span>] = s1</span><br><span class="line">df.at[dates[<span class="number">0</span>], <span class="string">&#x27;A&#x27;</span>] = <span class="number">0</span></span><br><span class="line">df.iat[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">df.loc[:, <span class="string">&#x27;D&#x27;</span>] = np.array([<span class="number">5</span>] * <span class="built_in">len</span>(df))</span><br><span class="line"></span><br><span class="line">df2 = df.copy()</span><br><span class="line">df2[df2 &gt; <span class="number">0</span>] = -df2</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>pandas</code> aligns all AXES when setting Series and DataFrame from <code>.loc</code>, and <code>.iloc</code>.</li><li>pandas primarily uses the value <code>np.nan</code>to represent missing data.</li><li><strong>Reindexing</strong> allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df1 = df.reindex(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=<span class="built_in">list</span>(df.columns) + [<span class="string">&#x27;E&#x27;</span>])df1.dropna(how=<span class="string">&#x27;any&#x27;</span>)df1.fillna(value=<span class="number">5</span>)pd.isna(df1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.mean()df.apply(np.cumsum)df.apply(<span class="keyword">lambda</span> x: x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))s.value_counts()s = pd.Series([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Aaba&#x27;</span>, <span class="string">&#x27;Baca&#x27;</span>, np.nan, <span class="string">&#x27;CABA&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>])s.str_lower()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]pd.concat(pieces)left = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="string">&#x27;lval&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)right = pd.DataFrame(&#123;<span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="string">&#x27;rval&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)pd.merge(left, right, on=<span class="string">&#x27;key&#x27;</span>)df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>])s = df.iloc[<span class="number">3</span>]df.append(s, ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>,   ....:                          <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>],   ....:                    <span class="string">&#x27;B&#x27;</span>: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>,   ....:                          <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;three&#x27;</span>],   ....:                    <span class="string">&#x27;C&#x27;</span>: np.random.randn(<span class="number">8</span>),   ....:                    <span class="string">&#x27;D&#x27;</span>: np.random.randn(<span class="number">8</span>)&#125;)df.groupby(<span class="string">&#x27;A&#x27;</span>).<span class="built_in">sum</span>()df.groupby([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]).<span class="built_in">sum</span>()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ts = pd.Series(np.random.randn(<span class="built_in">len</span>(rng)), rng)</span><br><span class="line">ts_utc = ts.tz_localize(<span class="string">&#x27;UTC&#x27;</span>)</span><br><span class="line">ts_utc.tz_convert(<span class="string">&#x27;US/Eastern&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">    <span class="string">&quot;raw_grade&quot;</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;grade&quot;</span>] = df[<span class="string">&quot;raw_grade&quot;</span>].astype(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">df[<span class="string">&quot;grade&quot;</span>].cat.categories = [<span class="string">&quot;very good&quot;</span>, <span class="string">&quot;good&quot;</span>, <span class="string">&quot;very bad&quot;</span>]</span><br><span class="line">df[<span class="string">&quot;grade&quot;</span>] = df[<span class="string">&quot;grade&quot;</span>].cat.set_categories([<span class="string">&quot;very bad&quot;</span>, <span class="string">&quot;bad&quot;</span>, <span class="string">&quot;medium&quot;</span>,</span><br><span class="line">            <span class="string">&quot;good&quot;</span>, <span class="string">&quot;very good&quot;</span>])</span><br></pre></td></tr></table></figure><h2><span id="function-application"> function application</span><a href="#function-application" class="header-anchor">#</a></h2><ol><li><strong>Tablewise</strong> Function Application: <code>pipe()</code></li><li><strong>Row or Column-wise</strong> Function Application: <code>apply()</code></li><li><strong>Aggregation</strong> API: <code>agg()</code> and <code>transform()</code></li><li>Applying <strong>Elementwise</strong> Functions: <code>applymap()</code></li></ol><h2><span id="iteration"> iteration</span><a href="#iteration" class="header-anchor">#</a></h2><ul><li>In short, basic iteration <code>(for i in object)</code> produces:<ul><li><code>Series</code>: value</li><li><code>DataFrame</code>: column labels</li></ul></li><li>Pandas objects also have the dict-like <code>items()</code> method to iterate over the (key, value) pairs.</li><li>To iterate over the rows of a DataFrame, you can use the following methods:<ul><li><code>iterrows()</code>: Iterate over the rows of a DataFrame as (index, Series) pairs. This converts the rows to Series objects, which can change the dtypes and has some performance implications.</li><li><code>itertuples()</code>: Iterate over the rows of a DataFrame as named tuples of the values. This is a lot faster than <code>iterrows()</code>, and is in most cases preferable to use to iterate over the values of a DataFrame.</li></ul></li><li><strong>Iterating through pandas objects is generally slow. In many cases, iterating manually over the rows is not needed and can be avoided with one of the following approaches:</strong><ul><li>Look for a vectorized solution: many operations can be performed using built-in methods or <code>NumPy</code>functions, (boolean) indexing, …</li><li>When you have a function that cannot work on the full <code>DataFrame/Series</code> at once, it is better to use <code>apply()</code> instead of iterating over the values. See the docs on function application.</li><li>If you need to do iterative manipulations on the values but performance is important, consider writing the inner loop with cython or numba. See the enhancing performance section for some examples of this approach.</li><li>You should never modify something you are iterating over. This is not guaranteed to work in all cases. Depending on the data types, the iterator returns a copy and not a view, and writing to it will have no effect!</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 学习笔记</title>
      <link href="/2025/01/05/numpy-note/"/>
      <url>/2025/01/05/numpy-note/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#intro">intro</a></li><li><a href="#basic">basic</a></li><li><a href="#attributes-of-ndarray">attributes of ndarray</a></li><li><a href="#creation">creation</a></li><li><a href="#indexing-slicing-and-iterating">Indexing, Slicing and Iterating</a></li><li><a href="#shape-manipulation">Shape Manipulation</a></li><li><a href="#copies-and-views">Copies and Views</a></li><li><a href="#broadcasting-rules">Broadcasting rules</a></li></ul><!-- tocstop --></div><h2><span id="intro"> intro</span><a href="#intro" class="header-anchor">#</a></h2><ul><li>At the core of the <code>NumPy</code> package, is the <code>ndarray</code> object.</li><li><code>NumPy</code> arrays have a <strong>fixed size</strong> at creation, unlike Python lists (which can grow dynamically). <strong>Changing the size of an ndarray will create a new array and delete the original</strong>.</li><li>The elements in a <code>NumPy</code> array are all required to be of the same data type, and thus will be the same size in memory.<ul><li>The <strong>exception</strong>: one can have arrays of (Python, including <code>NumPy</code>) <strong>objects</strong>, thereby allowing for arrays of different sized elements.</li></ul></li><li><code>NumPy</code>arrays facilitate advanced mathematical and other types of operations on large numbers of data. Typically, such operations are executed <strong>more efficiently</strong> and with less code than is possible using Python’s built-in sequences.</li><li><code>numpy.array</code> is not the same as the Standard Python Library class <code>array.array</code>, which only handles one-dimensional arrays and offers less functionality.</li></ul><h2><span id="basic"> basic</span><a href="#basic" class="header-anchor">#</a></h2><ul><li>In the example pictured below, the array has 2 axes. The first axis has a length of 2, the second axis has a length of 3.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>]]</span><br></pre></td></tr></table></figure><ul><li>When you print an array, <code>NumPy</code> displays it in a similar way to nested lists, but with the following layout:<ul><li>the last axis is printed from left to right,</li><li>the second-to-last is printed from top to bottom,</li><li>the rest are also printed from top to bottom, with each slice separated from the next by an empty line.</li><li>(<strong>Thus,</strong>) One-dimensional arrays are then printed as rows, bidimensionals as matrices and tridimensionals as lists of matrices.</li></ul></li><li>Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result.</li><li>Unlike in many matrix languages, the product operator  operates <strong>elementwise</strong> in <code>NumPy</code>arrays. The matrix product can be performed using the <code>@</code> operator (in python &gt;=3.5) or the <code>dot</code> function or method</li><li>Some operations, such as <code>+=</code> and <code>=</code>, act in place to modify an existing array rather than create a new one.</li><li>When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as <strong>upcasting</strong>).</li><li>Many <strong>unary</strong> operations, such as computing the sum of all the elements in the array, are implemented as methods of the ndarray class.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random((<span class="number">2</span>,<span class="number">3</span>))   </span><br><span class="line">a.<span class="built_in">sum</span>()   </span><br><span class="line">a.comsum()   </span><br><span class="line">a.<span class="built_in">min</span>()</span><br></pre></td></tr></table></figure><p>-Universal Functions: Within <code>NumPy</code>, these functions operate elementwise on an array, producing an array as output</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.exp()</span><br><span class="line">a.sqrt()</span><br><span class="line">np.add(B, C)</span><br><span class="line"><span class="comment"># all, any, apply_along_axis, argmax, argmin, argsort, average, bincount, ceil,# clip, conj, corrcoef, cov, cross, cumprod, cumsum, diff, dot, floor, inner,# inv, lexsort, max, maximum, mean, median, min, minimum, nonzero, outer, prod,# re, round, sort, std, sum, trace, transpose, var, vdot, vectorize, where</span></span><br></pre></td></tr></table></figure><h2><span id="attributes-of-ndarray"> attributes of ndarray</span><a href="#attributes-of-ndarray" class="header-anchor">#</a></h2><ul><li><code>ndarray.ndim</code> : the number of axes (dimensions) of the array.</li><li><code>ndarray.shape</code> : the dimensions of the array</li><li><code>ndarray.size</code></li><li><code>ndarray.dtype</code>: an object describing the type of the elements in the array. One can create or specify dtype’s using standard Python types. Additionally NumPy provides types of its own. <code>numpy.int32</code>, <code>numpy.int16</code>, and <code>numpy.float64</code> are some examples</li><li><code>ndarray.itemsize</code></li><li><code>ndarray.data</code></li></ul><h2><span id="creation"> creation</span><a href="#creation" class="header-anchor">#</a></h2><ul><li>from a regular Python list or tuple</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>] ], dtype=<span class="built_in">complex</span> )<span class="comment"># </span></span><br></pre></td></tr></table></figure><p><strong>A frequent error consists in calling array with multiple numeric arguments, rather than providing a single list of numbers as an argument.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array(1,2,3,4)    # WRONG# </span><br></pre></td></tr></table></figure><ul><li>Often, the elements of an array are originally unknown, but its size is known. Hence, NumPy offers several functions to create arrays with initial placeholder content. These minimize the necessity of growing arrays, an expensive operation.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">a = np.ones((<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), dtype = np.int16)</span><br><span class="line">a = np.empty((<span class="number">2</span>, <span class="number">3</span>)) <span class="comment"># uninitialized</span></span><br><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">a = np.arange( <span class="number">0</span>, <span class="number">2</span>, <span class="number">0.3</span> ) </span><br><span class="line"><span class="comment"># also, zeros, zeros_like, ones, ones_like, empty, empty_like, arange,</span></span><br><span class="line"><span class="comment"># also: linspace, numpy.random.mtrand.RandomState.rand</span></span><br><span class="line"><span class="comment"># also: numpy.random.mtrand.RandomState.randn, fromfunction, fromfile</span></span><br></pre></td></tr></table></figure><ul><li>When <code>arange</code>is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function <code>linspace</code>that receives as an argument the number of elements that we want, instead of the step:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi</span><br><span class="line">x = np.linspace( <span class="number">0</span>, <span class="number">2</span>*pi, <span class="number">100</span> )</span><br></pre></td></tr></table></figure><h2><span id="indexing-slicing-and-iterating"> Indexing, Slicing and Iterating</span><a href="#indexing-slicing-and-iterating" class="header-anchor">#</a></h2><ul><li>arrays can have one index per axis. These indices are given in a tuple separated by commas:</li><li>When fewer indices are provided than the number of axes, the missing indices are considered complete slices:</li><li><code>:</code> as needed to represent the remaining axes. <code>NumPy</code>also allows you to write this using dots as <code>b[i,...]</code>. The dots (<code>...</code>) represent as many colons as needed to produce a complete indexing tuple.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">15</span>).reshape(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">a[-<span class="number">1</span>] <span class="comment"># # the last row. Equivalent to b[-1,:]</span></span><br></pre></td></tr></table></figure><ul><li>Iterating over multidimensional arrays is done with respect to the <strong>first axis</strong>:</li><li>However, if one wants to perform an operation on each element in the array, one can use the flat attribute which is an iterator over all the elements of the array:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> b.flat:</span><br><span class="line">    <span class="built_in">print</span>(element)</span><br></pre></td></tr></table></figure><h2><span id="shape-manipulation"> Shape Manipulation</span><a href="#shape-manipulation" class="header-anchor">#</a></h2><ul><li>The <code>reshape</code> function returns its argument with a modified shape, whereas the <code>ndarray.resize</code> method modifies the array itself:</li><li>If a dimension is given as <code>-1</code> in a reshaping operation, the other dimensions are automatically calculated:</li><li>Stacking together different arrays</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.vstack(a, b)</span><br><span class="line">np.hstack(a, b)</span><br></pre></td></tr></table></figure><ul><li>The function <code>column_stack</code>stacks 1D arrays as columns into a 2D array. It is equivalent to <code>hstack</code>only for 2D arrays:</li><li>Using <code>hsplit</code>, you can split an array along its horizontal axis, either by specifying the number of equally shaped arrays to return, or by specifying the columns after which the division should occur:</li></ul><h2><span id="copies-and-views"> Copies and Views</span><a href="#copies-and-views" class="header-anchor">#</a></h2><ol><li>No Copy at All</li></ol><ul><li>Simple assignments make no copy of array objects or of their data.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">12</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a            <span class="comment"># no new object is created</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b <span class="keyword">is</span> a           <span class="comment"># a and b are two names for the same ndarray object</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape = <span class="number">3</span>,<span class="number">4</span>    <span class="comment"># changes the shape of a</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li>Python passes mutable objects as references, so function calls make no copy.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)                           <span class="comment"># id is a unique identifier of an object</span></span><br><span class="line"><span class="number">148293216</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(a)</span><br><span class="line"><span class="number">148293216</span></span><br></pre></td></tr></table></figure><ol start="2"><li>View or Shallow Copy</li></ol><ul><li>Different array objects can share the same data. The <code>view</code>method creates a new array object that looks at the same data.</li><li><strong>Slicing an array returns a view of it</strong>:</li></ul><ol start="3"><li>Deep Copy</li></ol><p>The <code>copy</code> method makes a complete copy of the array and its data.</p><p>Sometimes <strong>copy should be called after slicing if the original array is not required anymore</strong>. For example, suppose a is a huge intermediate result and the final result b only contains a small fraction of a, a deep copy should be made when constructing b with slicing:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="built_in">int</span>(<span class="number">1e8</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:<span class="number">100</span>].copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a  <span class="comment"># the memory of ``a`` can be released.</span></span><br></pre></td></tr></table></figure><h2><span id="broadcasting-rules"> Broadcasting rules</span><a href="#broadcasting-rules" class="header-anchor">#</a></h2><ul><li>if all input arrays do not have the same number of dimensions, a <code>1</code> will be repeatedly prepended to the shapes of the smaller arrays until all the arrays have the same number of dimensions.</li><li>arrays with a size of <code>1</code> along a particular dimension act as if they had the size of the array with the largest shape along that dimension. The value of the array element is assumed to be the same along that dimension for the “broadcast” array.</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 设置</title>
      <link href="/2025/01/02/python-setup/"/>
      <url>/2025/01/02/python-setup/</url>
      
        <content type="html"><![CDATA[<h2><span id="jupyter-extensions"> Jupyter extensions</span><a href="#jupyter-extensions" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions</span><br><span class="line">jupyter contrib nbextension install</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmlab 学习笔记</title>
      <link href="/2025/01/02/mmlab-note/"/>
      <url>/2025/01/02/mmlab-note/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#data-pipeline">data pipeline</a></li><li><a href="#config">CONFIG</a></li><li><a href="#dataset-dataloader">DATASET &amp; DATALOADER</a><ul><li><a href="#dataloader">DATALOADER</a></li><li><a href="#dataset">DATASET</a></li><li><a href="#basedataset">BASEDATASET</a></li></ul></li><li><a href="#model">MODEL</a></li><li><a href="#evaluation">EVALUATION</a><ul><li><a href="#zi-ding-yi-ping-ce-zhi-biao">自定义评测指标</a></li></ul></li><li><a href="#optimwrapper">OPTIMWRAPPER</a></li><li><a href="#parameter-scheduler">PARAMETER SCHEDULER</a></li><li><a href="#hook">HOOK</a></li><li><a href="#runnder">Runnder</a></li><li><a href="#registry">REGISTRY</a></li><li><a href="#resume">RESUME</a><ul><li><a href="#zi-dong-hui-fu-xun-lian"><strong>自动恢复训练</strong></a></li><li><a href="#zhi-ding-checkpoint-lu-jing"><strong>指定 checkpoint 路径</strong></a></li></ul></li></ul><!-- tocstop --></div><h2><span id="data-pipeline"> data pipeline</span><a href="#data-pipeline" class="header-anchor">#</a></h2><p>数据传递伪代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练过程</span></span><br><span class="line"><span class="keyword">for</span> data_batch <span class="keyword">in</span> train_dataloader:</span><br><span class="line">    data_batch = data_preprocessor(data_batch)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data_batch, <span class="built_in">dict</span>):</span><br><span class="line">        losses = model.forward(**data_batch, mode=<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(data_batch, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">        losses = model.forward(*data_batch, mode=<span class="string">&#x27;loss&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证过程</span></span><br><span class="line"><span class="keyword">for</span> data_batch <span class="keyword">in</span> val_dataloader:</span><br><span class="line">    data_batch = data_preprocessor(data_batch)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(data_batch, <span class="built_in">dict</span>):</span><br><span class="line">        outputs = model.forward(**data_batch, mode=<span class="string">&#x27;predict&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(data_batch, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">        outputs = model.forward(**data_batch, mode=<span class="string">&#x27;predict&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError()</span><br><span class="line">    evaluator.process(data_samples=outputs, data_batch=data_batch)</span><br><span class="line">metrics = evaluator.evaluate(<span class="built_in">len</span>(val_dataloader.dataset))</span><br></pre></td></tr></table></figure><ul><li>默认的 <code>train_step</code>、<code>val_step</code>、<code>test_step</code> 的行为，覆盖了从数据进入 <code>data preprocessor</code> 到 <code>model</code> 输出 <code>loss</code>、<code>predict</code> 结果的这一段流程，不影响其余部分。</li><li>虽然在上面的图中分开绘制了数据预处理器和模型，但数据预处理器是模型的一部分(在 <strong>config中的</strong><code>model</code> 里面定义）</li><li>模型的前向传播有 3 种模式，由输入参数 <code>mode</code> 控制</li></ul><h2><span id="config"> CONFIG</span><a href="#config" class="header-anchor">#</a></h2><ul><li><code>MMEngine</code> 实现了抽象的配置类（<code>Config</code>），为用户提供统一的配置访问接口。<ul><li>配置类能够支持不同格式的配置文件，包括 <code>python</code>，<code>json</code>，<code>yaml</code></li><li>配置类提供了类似字典或者 Python 对象属性的访问接口（读取和修改）</li><li>配置类也实现了一些特性，例如配置文件的字段继承等。</li><li>配置类提供了统一的接口 <code>Config.fromfile()</code>，来读取和解析配置文件</li></ul></li><li>合法的配置文件应该定义一系列键值对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_int = <span class="number">1</span></span><br><span class="line">test_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">test_dict = <span class="built_in">dict</span>(key1=<span class="string">&#x27;value1&#x27;</span>, key2=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>通过读取配置文件来初始化配置对象后</strong>，就可以像使用普通字典或者 Python 类一样来使用这个变量了。</p></li><li><p>我们提供了两种访问接口，即类似字典的接口 <code>cfg['key']</code> 或者类似 Python 对象属性的接口 <code>cfg.key</code>。这两种接口都支持读写。</p></li><li><p>注意，配置文件中定义的嵌套字段（即类似字典的字段），在 <code>Config</code> 中会将其转化为 <code>ConfigDict</code> 类，该类继承了 <code>Python</code> 内置字典类型的全部接口，同时也支持以对象属性的方式访问数据。</p></li><li><p><strong>配置文件的继承</strong></p><ul><li><strong><code>_base_</code> 是配置文件的保留字段，指定了该配置文件的继承来源。支持继承多个文件，将同</strong>时获得这多个文件中的所有字段，但是要求继承的多个文件中没有相同名称的字段，否则会报错。</li><li>通过这种方式，我们可以将配置文件进行拆分，定义一些通用配置文件，在实际配置文件中继承各种通用配置文件，可以减少具体任务的配置流程。</li></ul></li><li><p>配置文件（字段）的修改</p><ul><li>只需要在新的配置文件中，重新定义一下需要修改的字段即可</li><li>规则也适用于增加一些下级字段（使用 dict）</li></ul></li><li><p><strong>配置文件（字典字段中 key）的删除</strong></p><ul><li>有时候我们对于继承过来的<strong>字典类型字段</strong>，不仅仅是想修改其中某些 key，可能还需要删除其中的一些 key。这时候在重新定义这个字典时，需要指定 <code>_delete_=True</code>，表示将没有在新定义的字典中出现的 key 全部删除。</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_base_=[<span class="string">&#x27;optimizer_cfg.py&#x27;</span>, <span class="string">&#x27;runtime_cfg.py&#x27;</span>]</span><br><span class="line">model= <span class="built_in">dict</span>(<span class="built_in">type</span>=<span class="string">&#x27;ResNet&#x27;</span>,depth=<span class="number">50</span>)</span><br><span class="line">optimizer= <span class="built_in">dict</span>(_delete_=<span class="literal">True</span>, <span class="built_in">type</span>=<span class="string">&#x27;SGD&#x27;</span>,lr=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure></li><li><p>有时我们想重复利用 <code>_base_</code> 中定义的字段内容，就可以通过 <code>&#123;&#123;_base_.xxxx&#125;&#125;</code> 获取来获取对应变量的拷贝。</p></li><li><p>在启动训练脚本时，用户可能通过传参的方式来修改配置文件的部分字段，为此我们提供了 <code>dump</code> 接口来导出更改后的配置文件。与读取配置文件类似，用户可以通过 <code>cfg.dump('config.xxx')</code> 来选择导出文件的格式。<code>dump</code> 同样可以导出有继承关系的配置文件，导出的文件可以被独立使用，不再依赖于 <code>_base_</code> 中定义的文件。</p></li><li><p>自定义字段</p><ul><li>有时候我们希望配置文件中的一些字段和当前路径或者文件名等相关</li><li>目前支持的预定义字段有以下四种：<ul><li><code>&#123;&#123;fileDirname&#125;&#125;</code> - 当前文件的目录名，例如 <code>/home/your-username/your-project/folder</code></li><li><code>&#123;&#123;fileBasename&#125;&#125;</code> - 当前文件的文件名，例如 <code>file.py</code></li><li><code>&#123;&#123;fileBasenameNoExtension&#125;&#125;</code> - 当前文件不包含扩展名的文件名，例如 <code>file</code></li><li><code>&#123;&#123;fileExtname&#125;&#125;</code> - 当前文件的扩展名，例如 <code>.py</code></li></ul></li></ul></li><li><p><strong>通常，我们使用 <code>type</code>字段 来指定组件的类，并使用其他字段来传递类的初始化参数。<a href="https://mmengine.readthedocs.io/zh_CN/latest/advanced_tutorials/registry.html">注册器教程</a> 对其进行了详细描述。</strong></p></li><li><p>预处理配置（<code>data_preprocessor</code>）既可以作为 <code>model</code> 的一个子字段，也可以定义在外部的 <code>data_preprocessor</code> 字段， 同时配置时，优先使用 <code>model.data_preprocessor</code> 的配置。</p></li></ul><h2><span id="dataset-amp-dataloader"> DATASET &amp; DATALOADER</span><a href="#dataset-amp-dataloader" class="header-anchor">#</a></h2><ul><li>数据加载器（<strong>DataLoader</strong>）是 <strong>MMEngine</strong> 的训练和测试流程中的一个重要组件。 从概念上讲，它源于 <a href="https://pytorch.org/">PyTorch</a> 并保持一致。<strong>DataLoader</strong> 从文件系统加载数据，原始数据通过数据准备流程后被发送给数据预处理器。</li><li>通常来说，<ul><li><strong>数据集(dataset)</strong> 定义了数据的总体数量、读取方式以及预处理，</li><li><strong>数据加载器(dataloader)</strong> 则在不同的设置下迭代地加载数据，如批次大小（<code>batch_size</code>）、随机乱序（<code>shuffle</code>）、并行（<code>num_workers</code>）等。</li><li>数据集经过数据加载器封装后构成了<strong>数据源</strong>。</li></ul></li></ul><h3><span id="dataloader"> DATALOADER</span><a href="#dataloader" class="header-anchor">#</a></h3><ul><li>在执行器（<code>Runner</code>）中，你可以分别配置以下 3 个参数来指定对应的数据加载器<ul><li><code>train_dataloader</code>：在 <code>Runner.train()</code> 中被使用，为模型提供训练数据</li><li><code>val_dataloader</code>：在 <code>Runner.val()</code> 中被使用，也会在 <code>Runner.train()</code> 中每间隔一段时间被使用，用于模型的验证评测</li><li><code>test_dataloader</code>：在 <code>Runner.test()</code> 中被使用，用于模型的测试</li></ul></li><li>MMEngine 完全支持 PyTorch 的原生 <code>DataLoader</code>，因此上述 3 个参数均可以直接传入构建好的 <code>DataLoader</code>。同时，借助 MMEngine 的<a href="https://mmengine.readthedocs.io/zh-cn/latest/advanced_tutorials/registry.html">注册机制</a>，以上参数也可以传入 <code>dict</code>，dict中的键值与 <code>DataLoader</code> 的构造参数一一对应。</li><li><strong>sampler 与 shuffle</strong><ul><li>在 MMEngine 中我们要求通过 <code>dict</code> 传入的数据加载器的配置必须包含 <code>sampler</code> 参数。同时，<code>shuffle</code> 参数也从 <code>DataLoader</code> 中移除，这是由于在 PyTorch 中 <code>sampler</code> 与 <code>shuffle</code> 参数是互斥的</li><li>事实上，在 PyTorch 的实现中，<code>shuffle</code> 只是一个便利记号。当设置为 <code>True</code> 时 <code>DataLoader</code> 会自动在内部使用 <code>RandomSampler</code></li><li><code>DefaultSampler</code> 是 MMEngine 内置的一种采样器，它屏蔽了单进程训练与多进程训练的细节差异，使得单卡与多卡训练可以无缝切换</li><li><code>DefaultSampler</code> 适用于绝大部分情况，并且我们保证在执行器中使用它时，随机数等容易出错的细节都被正确地处理，防止你陷入多进程训练的常见陷阱。</li></ul></li><li><code>collate_fn</code> 这一参数常常被使用者忽略，但在 MMEngine 中你需要额外注意：当你传入 <code>dict</code> 来构造数据加载器时，MMEngine 会默认使用内置的 <a href="https://mmengine.readthedocs.io/zh_CN/latest/api/generated/mmengine.dataset.pseudo_collate.html#mmengine.dataset.pseudo_collate">pseudo_collate</a>，这一点明显区别于 PyTorch 默认的 <a href="https://pytorch.org/docs/stable/data.html#torch.utils.data.default_collate">default_collate</a>。因此，当你迁移 PyTorch 项目时，需要在配置文件中手动指明 <code>collate_fn</code> 以保持行为一致</li><li>MMengine 中提供了 2 种内置的 <code>collate_fn</code>：<ul><li><code>pseudo_collate</code>，缺省时的默认参数。它不会将数据沿着 <code>batch</code> 的维度合并。详细说明可以参考 <a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.dataset.pseudo_collate.html#mmengine.dataset.pseudo_collate">pseudo_collate</a></li><li><code>default_collate</code>，与 PyTorch 中的 <code>default_collate</code> 行为几乎完全一致，会将数据转化为 <code>Tensor</code> 并沿着 <code>batch</code> 维度合并。一些细微不同和详细说明可以参考 <a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.dataset.default_collate.html#mmengine.dataset.default_collate">default_collate</a></li></ul></li></ul><h3><span id="dataset"> DATASET</span><a href="#dataset" class="header-anchor">#</a></h3><ul><li><code>torchvision</code> 中提供了丰富的公开数据集，它们都可以在 MMEngine 中直接使用</li><li>但是，当需要将上述示例转换为配置文件时，你需要对 <code>torchvision</code> 中的数据集进行额外的注册。</li><li>如果你同时用到了 <code>torchvision</code> 中的数据预处理模块，那么你也需要编写额外代码来对它们进行注册和构建。</li></ul><h3><span id="basedataset"> BASEDATASET</span><a href="#basedataset" class="header-anchor">#</a></h3><ul><li><p>因此 MMEngine 实现了一个数据集基类（<code>BaseDataset</code>）并定义了一些基本接口，且基于这套接口实现了一些数据集包装（<code>DatasetWrapper</code>）。<code>OpenMMLab</code> 算法库中的大部分数据集都会满足这套数据集基类定义的接口，并使用统一的数据集包装。</p></li><li><p><strong>数据集基类中包含的 <code>parse_data_info()</code> 方法用于将标注文件里的一个原始数据处理成一个或若干个训练/测试样本的方法。因此对于自定义数据集类，用户需要实现 <code>parse_data_info()</code> 方法。</strong></p></li><li><p>与 <code>torch.utils.data.Dataset</code> 类似，数据集初始化后，支持 <code>__getitem__</code> 方法，用来索引数据，以及 <code>__len__</code> 操作获取数据集大小，除此之外，OpenMMLab 的数据集基类主要提供了以下接口来访问具体信息：</p><ul><li><code>metainfo</code>：返回元信息，返回值为字典</li><li><code>get_data_info(idx)</code>：返回指定 <code>idx</code> 的样本全量信息，返回值为字典</li><li><code>__getitem__(idx)</code>：返回指定 <code>idx</code> 的样本经过 pipeline 之后的结果（也就是送入模型的数据），返回值为字典</li><li><code>__len__()</code>：返回数据集长度，返回值为整数型</li><li><code>get_subset_(indices)</code>：根据 <code>indices</code> 以 inplace 的方式修改原数据集类。如果 <code>indices</code> 为 <code>int</code>，则原数据集类只包含前若干个数据样本；如果 <code>indices</code> 为 <code>Sequence[int]</code>，则原数据集类包含根据 <code>Sequence[int]</code> 指定的数据样本。</li><li><code>get_subset(indices)</code>：根据 <code>indices</code> 以非 inplace 的方式返回子数据集类，即重新复制一份子数据集。如果 <code>indices</code> 为 <code>int</code>，则返回的子数据集类只包含前若干个数据样本；如果 <code>indices</code> 为 <code>Sequence[int]</code>，则返回的子数据集类包含根据 <code>Sequence[int]</code> 指定的数据样本。</li></ul></li><li><p>数据集基类的基本功能是加载数据集信息，这里我们将数据集信息分成两类</p><ul><li>一种是元信息 (meta information)，代表数据集自身相关的信息，有时需要被模型或其他外部组件获取，比如在图像分类任务中，数据集的元信息一般包含类别信息 <code>classes</code>，因为分类模型 <code>model</code> 一般需要记录数据集的类别信息；</li><li>另一种为数据信息 (data information)，在数据信息中，定义了具体样本的文件路径、对应标签等的信息。</li></ul></li><li><p>除此之外，数据集基类的另一个功能为不断地将数据送入数据流水线（data pipeline）中，进行数据预处理。</p></li><li><p>数据集基类的初始化流程</p></li><li><p><code>load metainfo</code>：获取数据集的元信息，元信息有三种来源，优先级从高到低为：</p><ul><li><code>__init__()</code> 方法中用户传入的 <code>metainfo</code> 字典；改动频率最高，因为用户可以在实例化数据集时，传入该参数；</li><li>类属性 <code>BaseDataset.METAINFO</code> 字典；改动频率中等，因为用户可以改动自定义数据集类中的类属性 <code>BaseDataset.METAINFO</code>；</li><li>标注文件中包含的 <code>metainfo</code> 字典；改动频率最低，因为标注文件一般不做改动。如果三种来源中有相同的字段，优先级最高的来源决定该字段的值，这些字段的优先级比较是：用户传入的 <code>metainfo</code> 字典里的字段 &gt; <code>BaseDataset.METAINFO</code> 字典里的字段 &gt; 标注文件中 <code>metainfo</code> 字典里的字段。</li></ul></li><li><p><code>join path</code>：处理数据与标注文件的路径；</p></li><li><p><code>build pipeline</code>：构建数据流水线（data pipeline），用于数据预处理与数据准备；</p></li><li><p><code>full init</code>：完全初始化数据集类，该步骤主要包含以下操作：</p><ul><li><code>load data list</code>：读取与解析满足 OpenMMLab 2.0 数据集格式规范的标注文件，该步骤中会调用 <code>parse_data_info()</code> 方法，该方法负责解析标注文件里的每个原始数据；</li><li><code>filter data</code> (可选)：根据 <code>filter_cfg</code> 过滤无用数据，比如不包含标注的样本等；默认不做过滤操作，下游子类可以按自身所需对其进行重写；</li><li><code>get subset</code> (可选)：根据给定的索引或整数值采样数据，比如只取前 10 个样本参与训练/测试；默认不采样数据，即使用全部数据样本；</li><li><code>serialize data</code> (可选)：序列化全部样本，以达到节省内存的效果，详情请参考<a href="https://mmengine.readthedocs.io/zh-cn/latest/advanced_tutorials/basedataset.html#id10">节省内存</a>；默认操作为序列化全部样本。</li></ul></li><li><p>OpenMMLab 2.0 数据集格式规范规定:</p><ul><li>标注文件必须为 <code>json</code> 或 <code>yaml</code>，<code>yml</code> 或 <code>pickle</code>，<code>pkl</code> 格式；</li><li>标注文件中存储的字典必须包含 <code>metainfo</code> 和 <code>data_list</code> 两个字段。</li><li>其中 <code>metainfo</code> 是一个字典，里面包含数据集的元信息；</li><li><code>data_list</code> 是一个列表，列表中每个元素是一个字典，该字典定义了一个原始数据（raw data），每个原始数据包含一个或若干个训练/测试样本。</li></ul></li></ul><h2><span id="model"> MODEL</span><a href="#model" class="header-anchor">#</a></h2><ul><li><p>在基于 MMEngine 开发时，定义的模型由执行器(<code>runner</code>)管理，且需要实现 <code>train_step</code>、<code>val_step</code> 和 <code>test_step</code> 方法。</p></li><li><p>对于检测、识别、分割一类的深度学习任务，上述方法通常为标准的流程，例如在 <code>train_step</code> 里更新参数，返回损失；<code>val_step</code> 和 <code>test_step</code> 返回预测结果。</p></li><li><p><strong>因此 MMEngine 抽象出模型基类 <a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.model.BaseModel.html#mmengine.model.BaseModel">BaseModel</a>，实现了上述接口的标准流程</strong></p></li><li><p>得益于 <code>BaseModel</code> 我们只需要让模型继承自模型基类，并按照一定的规范实现 <code>forward</code>，就能让模型在执行器中运行起来。</p></li><li><p><code>forward</code></p><ul><li><code>forward</code> 的入参需通常需要和 <a href="https://pytorch.org/tutorials/beginner/basics/data_tutorial.html">DataLoader</a> 的输出保持一致 (自定义<a href="https://mmengine.readthedocs.io/zh-cn/latest/tutorials/model.html#datapreprocessor">数据预处理器</a>除外)，<ul><li><code>DataLoader</code> 返回元组类型的数据 <code>data</code>，<code>forward</code> 需要能够接受 <code>*data</code> 的解包后的参数；</li><li>如果返回字典类型的数据 <code>data</code>，<code>forward</code> 需要能够接受 <code>**data</code> 解包后的参数。</li><li><code>mode</code> 参数用于控制 forward 的返回结果<ul><li><code>mode='loss'</code>：<code>loss</code> 模式通常在训练阶段启用，并返回一个损失字典。损失字典的 key-value 分别为损失名和可微的 <code>torch.Tensor</code>。字典中记录的损失会被用于更新参数和记录日志。模型基类会在 <code>train_step</code> 方法中调用该模式的 <code>forward</code>。</li><li><code>mode='predict'</code>： <code>predict</code> 模式通常在验证、测试阶段启用，并返回列表/元组形式的预测结果，预测结果需要和 <a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.evaluator.Evaluator.html#mmengine.evaluator.Evaluator.process">process</a> 接口的参数相匹配。OpenMMLab 系列算法对 <code>predict</code> 模式的输出有着更加严格的约定，需要输出列表形式的<a href="https://mmengine.readthedocs.io/zh-cn/latest/advanced_tutorials/data_element.html">数据元素</a>。模型基类会在 <code>val_step</code>，<code>test_step</code> 方法中调用该模式的 <code>forward</code>。</li><li><code>mode='tensor'</code>：<code>tensor</code> 和 <code>predict</code> 模式均返回模型的前向推理结果，区别在于 <code>tensor</code> 模式下，<code>forward</code> 会返回未经后处理的张量，例如返回未经非极大值抑制（nms）处理的检测结果，返回未经 <code>argmax</code> 处理的分类结果。我们可以基于 <code>tensor</code> 模式的结果进行自定义的后处理。</li></ul></li></ul></li></ul></li><li><p><code>train_step</code>: 执行 <code>forward</code> 方法的 <code>loss</code> 分支，得到损失字典。模型基类基于<a href="https://mmengine.readthedocs.io/zh-cn/latest/tutorials/optim_wrapper.html">优化器封装</a> 实现了标准的梯度计算、参数更新、梯度清零流程。其等效伪代码如下：</p></li><li><p><code>val_step</code>: 执行 <code>forward</code> 方法的 <code>predict</code> 分支，返回预测结果：**</p></li><li><p><code>test_step</code>: 同 <code>val_step</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">val_step</span>(<span class="params">self, data, optim_wrapper</span>):</span><br><span class="line">    data = <span class="variable language_">self</span>.data_preprocessor(data, training=<span class="literal">False</span>)</span><br><span class="line">    outputs = <span class="variable language_">self</span>(**data, mode=<span class="string">&#x27;predict&#x27;</span>) <span class="comment"># 预测模式，返回预测结果</span></span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train_step</span>(<span class="params">self, data, optim_wrapper</span>):</span><br><span class="line">    data = <span class="variable language_">self</span>.data_preprocessor(data, training=<span class="literal">True</span>)  <span class="comment"># 按下不表，详见数据与处理器一节</span></span><br><span class="line">    loss = <span class="variable language_">self</span>(**data, mode=<span class="string">&#x27;loss&#x27;</span>)  <span class="comment"># loss 模式，返回损失字典，假设 data 是字典，使用 ** 进行解析。事实上 train_step 兼容 tuple 和 dict 类型的输入。</span></span><br><span class="line">    parsed_losses, log_vars = <span class="variable language_">self</span>.parse_losses() <span class="comment"># 解析损失字典，返回可以 backward 的损失以及可以被日志记录的损失</span></span><br><span class="line">    optim_wrapper.update_params(parsed_losses)  <span class="comment"># 更新参数</span></span><br><span class="line">    <span class="keyword">return</span> log_vars</span><br></pre></td></tr></table></figure><h2><span id="evaluation"> EVALUATION</span><a href="#evaluation" class="header-anchor">#</a></h2><ul><li>在模型验证和模型测试中，通常需要对模型精度做定量评测。我们可以通过在配置文件中指定评测指标（<code>Metric</code>）来实现这一功能。</li><li>在基于 MMEngine 进行模型训练或测试时，用户只需要在配置文件中通过 <code>val_evaluator</code> 和 <code>test_evaluator</code> 2 个字段分别指定模型验证和测试阶段的评测指标即可</li><li>如果需要同时评测多个指标，也可以将 <code>val_evaluator</code> 或 <code>test_evaluator</code> 设置为一个列表，其中每一项为一个评测指标的配置信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test_evaluator = [</span><br><span class="line">    <span class="comment"># 目标检测指标</span></span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;CocoMetric&#x27;</span>,</span><br><span class="line">        metric=[<span class="string">&#x27;bbox&#x27;</span>, <span class="string">&#x27;segm&#x27;</span>],</span><br><span class="line">        ann_file=<span class="string">&#x27;annotations/instances_val2017.json&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment"># 全景分割指标</span></span><br><span class="line">    <span class="built_in">dict</span>(</span><br><span class="line">        <span class="built_in">type</span>=<span class="string">&#x27;CocoPanopticMetric&#x27;</span>,</span><br><span class="line">        ann_file=<span class="string">&#x27;annotations/panoptic_val2017.json&#x27;</span>,</span><br><span class="line">        seg_prefix=<span class="string">&#x27;annotations/panoptic_val2017&#x27;</span>,</span><br><span class="line">    )</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3><span id="zi-ding-yi-ping-ce-zhi-biao"> 自定义评测指标</span><a href="#zi-ding-yi-ping-ce-zhi-biao" class="header-anchor">#</a></h3><ul><li>需要继承基类 <a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.evaluator.BaseMetric.html#mmengine.evaluator.BaseMetric">BaseMetric</a></li><li>此外，评测指标类需要用注册器 <code>METRICS</code> 进行注册</li><li>实现 <code>process()</code> 方法。该方法有 2 个输入参数，分别是一个批次的测试数据样本 <code>data_batch</code> 和模型预测结果 <code>data_samples</code>。我们从中分别取出样本类别标签和分类预测结果，并存放在 <code>self.results</code> 中。</li><li>实现 <code>compute_metrics()</code> 方法。该方法有 1 个输入参数 <code>results</code>，里面存放了所有批次测试数据经过 <code>process()</code> 方法处理后得到的结果。从中取出样本类别标签和分类预测结果，即可计算得到分类正确率 <code>acc</code>。最终，将计算得到的评测指标以字典的形式返回。</li><li>（可选）可以为类属性 <code>default_prefix</code> 赋值。该属性会自动作为输出的评测指标名前缀（如 <code>defaut_prefix='my_metric'</code>,则实际输出的评测指标名为 <code>'my_metric/acc'</code>），用以进一步区分不同的评测指标。该前缀也可以在配置文件中通过 <code>prefix</code> 参数改写。我们建议在 docstring 中说明该评测指标类的 <code>default_prefix</code> 值以及所有的返回指标名称。</li></ul><h2><span id="optimwrapper"> OPTIMWRAPPER</span><a href="#optimwrapper" class="header-anchor">#</a></h2><ul><li>是 <code>Pytorch</code> 原生优化器（<code>Optimizer</code>）高级抽象</li><li>它在增加了更多功能的同时，提供了一套统一的接口。</li><li>优化器封装支持不同的训练策略，包括混合精度训练、梯度累加和梯度截断。我们可以根据需求选择合适的训练策略。</li><li>优化器封装还定义了一套标准的参数更新流程，用户可以基于这一套流程，实现同一套代码，不同训练策略的切换。</li><li><strong>优化器封装的 <code>update_params</code> 实现了标准的梯度计算(<code>loss.backward()</code>)、参数更新(<code>optimizer.step()</code>)和梯度清零(<code>optimizer.zero()</code>)流程，可以直接用来更新模型参数。</strong></li></ul><h2><span id="parameter-scheduler"> PARAMETER SCHEDULER</span><a href="#parameter-scheduler" class="header-anchor">#</a></h2><ul><li>在模型训练过程中，我们往往不是采用固定的优化参数，例如学习率等，会随着训练轮数的增加进行调整。</li><li>最简单常见的学习率调整策略就是阶梯式下降，例如每隔一段时间将学习率降低为原来的几分之一。</li><li>PyTorch 中有学习率调度器 <code>LRScheduler</code> 来对各种不同的学习率调整方式进行抽象，但支持仍然比较有限，</li><li>在 MMEngine 中，我们对其进行了拓展，实现了更通用的<a href="https://mmengine.readthedocs.io/zh-cn/latest/api/generated/mmengine.optim._ParamScheduler.html#mmengine.optim._ParamScheduler">参数调度器</a>，可以对学习率、动量等优化器相关的参数进行调整，并且支持多个调度器进行组合，应用更复杂的调度策略。</li></ul><h2><span id="hook"> HOOK</span><a href="#hook" class="header-anchor">#</a></h2><ul><li>钩子编程是一种编程模式，是指在程序的一个或者多个位置设置位点（挂载点），当程序运行至某个位点时，会自动调用运行时注册到位点的所有方法。钩子编程可以提高程序的灵活性和拓展性，用户将自定义的方法注册到位点便可被调用而无需修改程序中的代码。</li><li></li></ul><h2><span id="runnder"> Runnder</span><a href="#runnder" class="header-anchor">#</a></h2><ul><li>使用配置文件时，你通常不需要手动注册所有模块。例如，<code>torch.optim</code> 中的所有优化器（如 <code>Adam</code> <code>SGD</code>等）都已经在 <code>mmengine.optim</code> 中注册完成。使用时的经验法则是：尝试直接使用 <code>PyTorch</code> 中的组件，只有当出现报错时再手动注册。</li><li>当使用配置文件写法时，你的自定义模块的实现代码通常存放在独立文件中，可能并未被正确注册，进而导致构建失败。我们推荐你阅读<a href="https://mmengine.readthedocs.io/zh_CN/latest/advanced_tutorials/config.html#python">配置</a>文档中 <code>custom_imports</code> 相关的内容以更好地使用配置文件系统。</li></ul><h2><span id="registry"> REGISTRY</span><a href="#registry" class="header-anchor">#</a></h2><ul><li>MMEngine 实现的<a href="https://mmengine.readthedocs.io/zh_CN/latest/api/generated/mmengine.registry.Registry.html#mmengine.registry.Registry">注册器</a>可以看作一个映射表和模块构建方法（build function）的组合。<ul><li>映射表维护了一个字符串到类或者函数的映射，使得用户可以借助字符串查找到相应的类或函数，例如维护字符串 <code>&quot;ResNet&quot;</code> 到 <code>ResNet</code> 类或函数的映射，使得用户可以通过 <code>&quot;ResNet&quot;</code> 找到 <code>ResNet</code> 类；</li><li>而模块构建方法则定义了如何根据字符串查找到对应的类或函数以及如何实例化这个类或者调用这个函数，例如，通过字符串 <code>&quot;bn&quot;</code> 找到 <code>nn.BatchNorm2d</code> 并实例化 <code>BatchNorm2d</code> 模块；又或者通过字符串 <code>&quot;build_batchnorm2d&quot;</code> 找到 <code>build_batchnorm2d</code> 函数并返回该函数的调用结果</li><li>一个注册器管理的类或函数通常有相似的接口和功能，因此该注册器可以被视作这些类或函数的抽象。例如注册器 <code>MODELS</code> 可以被视作所有模型的抽象，管理了 <code>ResNet</code>，<code>SEResNet</code> 和 <code>RegNetX</code> 等分类网络的类以及 <code>build_ResNet</code>, <code>build_SEResNet</code> 和 <code>build_RegNetX</code> 等分类网络的构建函数。</li></ul></li></ul><h2><span id="resume"> RESUME</span><a href="#resume" class="header-anchor">#</a></h2><ul><li>恢复的状态包括<strong>模型的权重、优化器和优化器参数调整策略的状态。</strong></li></ul><h3><span id="zi-dong-hui-fu-xun-lian"> <strong>自动恢复训练</strong></span><a href="#zi-dong-hui-fu-xun-lian" class="header-anchor">#</a></h3><ul><li>设置 <code>Runner</code> 的 <code>resume</code> 等于 <code>True</code>，<code>Runner</code> 会从 <code>work_dir</code> 中加载最新的 checkpoint。如果 <code>work_dir</code> 中有最新的 checkpoint（例如该训练在上一次训练时被中断），则会从该 checkpoint 恢复训练，否则（例如上一次训练还没来得及保存 checkpoint 或者启动了新的训练任务）会重新开始训练。</li></ul><h3><span id="zhi-ding-checkpoint-lu-jing"> <strong>指定 checkpoint 路径</strong></span><a href="#zhi-ding-checkpoint-lu-jing" class="header-anchor">#</a></h3><ul><li>如果希望指定恢复训练的路径，除了设置 <code>resume=True</code>，还需要设置 <code>load_from</code> 参数。需要注意的是，如果只设置了 <code>load_from</code> 而没有设置 <code>resume=True</code>，则只会加载 checkpoint 中的权重并重新开始训练，而不是接着之前的状态继续训练。</li></ul>]]></content>
      
      
      <categories>
          
          <category> deap learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mmlab </tag>
            
            <tag> deep learning </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 中奇奇怪怪的问题</title>
      <link href="/2025/01/02/ubuntu-others/"/>
      <url>/2025/01/02/ubuntu-others/</url>
      
        <content type="html"><![CDATA[<h2><span id="amd-vi-event-logged-io-page-fault-domain-0x0015-address-0xffe00900"> <code>amd_vi event logged io_page_fault domain=0x0015 address=0xffe00900</code></span><a href="#amd-vi-event-logged-io-page-fault-domain-0x0015-address-0xffe00900" class="header-anchor">#</a></h2><p>解决方案: 在<code>/etc/default/grub</code> 的 <code>GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet splash”</code> 这一行最后添加<code>iommu=off</code>参数, 然后执行<code>sudo update-grub</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet splash iommu=off&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> errors </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Setup xrdp</title>
      <link href="/2025/01/02/ubuntu-setup-xrdp/"/>
      <url>/2025/01/02/ubuntu-setup-xrdp/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新系统</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;更新系统包...&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 xrdp 和相关依赖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;安装 xrdp 和依赖...&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt install -y xrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 xrdp 用户到 ssl-cert 组</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;配置 xrdp 用户权限...&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> adduser xrdp ssl-cert</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用并启动 xrdp 服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;启动并启用 xrdp 服务...&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now xrdp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查桌面环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测桌面环境...&quot;</span></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">command</span> -v gnome-session &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;未检测到 GNOME 桌面环境，安装中...&quot;</span></span><br><span class="line">    <span class="built_in">sudo</span> apt install -y ubuntu-desktop</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 xrdp 使用 GNOME 桌面</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;配置 GNOME 桌面环境为默认会话...&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;gnome-session&quot;</span> &gt;~/.xsession</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开防火墙端口（可选）</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查并配置防火墙规则...&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sudo</span> ufw status | grep -q <span class="string">&quot;inactive&quot;</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;防火墙未激活，跳过配置。&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">sudo</span> ufw allow 3389/tcp</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已打开 3389 端口。&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查服务状态</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查 xrdp 服务状态...&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl status xrdp --no-pager</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;配置完成！可以通过 RDP 客户端连接到此机器，使用当前系统用户登录。&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> xrdp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remote Sensing Imagery Download</title>
      <link href="/2025/01/02/remote-sensing-imagery-download/"/>
      <url>/2025/01/02/remote-sensing-imagery-download/</url>
      
        <content type="html"><![CDATA[<h2><span id="sentinel"> Sentinel</span><a href="#sentinel" class="header-anchor">#</a></h2><blockquote><p><a href="https://dataspace.copernicus.eu/">https://dataspace.copernicus.eu/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> remote sensing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remote sensing </tag>
            
            <tag> download </tag>
            
            <tag> Landsat </tag>
            
            <tag> Sentinel2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Proxy设施</title>
      <link href="/2025/01/02/docker-proxy/"/>
      <url>/2025/01/02/docker-proxy/</url>
      
        <content type="html"><![CDATA[<h1><span id="how-to-use-docker-in-synology-with-proxy"> how to use docker in synology with proxy</span><a href="#how-to-use-docker-in-synology-with-proxy" class="header-anchor">#</a></h1><blockquote><p><a href="https://dockerproxy.link/">https://dockerproxy.link/</a></p></blockquote><p>Take <code>stilleshan/frpc:latest</code> for example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull dockerproxy.net/stilleshan/frpc:latest <span class="comment">#代理拉取镜像</span></span><br><span class="line">docker tag dockerproxy.net/stilleshan/frpc:latest stilleshan/frpc:latest <span class="comment"># 重命名镜像</span></span><br><span class="line">docker rmi dockerproxy.net/stilleshan/frpc:latest <span class="comment"># 删除代理镜像</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> proxy </tag>
            
            <tag> synology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 学习笔记</title>
      <link href="/2025/01/02/python-note/"/>
      <url>/2025/01/02/python-note/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#python-base">Python base</a></li><li><a href="#control-flow">Control flow</a></li><li><a href="#functions">Functions</a></li><li><a href="#classes">classes</a></li><li><a href="#modules">Modules</a></li><li><a href="#packages">packages</a></li><li><a href="#input-and-output">Input and Output</a></li><li><a href="#looping-techniques">Looping Techniques</a></li><li><a href="#data-struture">Data Struture</a></li><li><a href="#conditions">Conditions</a></li><li><a href="#strings">Strings</a></li><li><a href="#imports">imports</a></li></ul><!-- tocstop --></div><h2><span id="python-base"> Python base</span><a href="#python-base" class="header-anchor">#</a></h2><ul><li>When known to the interpreter, the script name and additional arguments thereafter are turned into a list of strings and assigned to the <code>argv</code> variable in the <code>sys</code> module.</li><li>the built-in function <code>vars()</code>, which returns a dictionary containing all local variables.</li><li><strong>multiple assignment</strong>: the expressions on the right-hand side are all evaluated first before any of the assignments take place. The right-hand side expressions are evaluated from the left to the right.</li><li><strong>condition</strong>: The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false</li></ul><h2><span id="control-flow"> Control flow</span><a href="#control-flow" class="header-anchor">#</a></h2><ul><li><p>The <code>for</code> statement in Python differs a bit from what you may be used to in <code>C</code> or <code>Pascal</code>. Rather than <strong>always</strong> iterating over an arithmetic progression of numbers (like in <code>Pascal</code>), or giving the user the ability to define both the iteration step and halting condition (as <code>C</code>), Python’s <code>for</code> statement iterates over the items <strong>of any sequence</strong> (a list or a string), in the order that they appear in the sequence.</p><ul><li>Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop <strong>over a copy</strong> of the collection or to create a new collection:</li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> user, status <span class="keyword">in</span> users.copy.items():</span><br><span class="line">    <span class="keyword">if</span> status == <span class="string">&#x27;inactive&#x27;</span>:</span><br><span class="line">        <span class="keyword">del</span> users[user]</span><br></pre></td></tr></table></figure></li><li><p>In many ways the object returned by <code>range()</code> behaves as if it is a <code>list</code>, but in fact it isn’t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the <code>list</code>, thus saving space.</p></li></ul><h2><span id="functions"> Functions</span><a href="#functions" class="header-anchor">#</a></h2><ul><li>The <code>execution</code> of a function introduces a new symbol table used for the local variables of the function.<ul><li>More precisely, all variable assignments in a function store the value in the local symbol table;</li><li>whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names.</li><li>Thus, <strong>global variables and variables of enclosing functions</strong> cannot be directly assigned a value within a function (unless, for global variables, named in a global statement, or, for variables of enclosing functions, named in a nonlocal statement), although they may be referenced.</li><li>When a function calls another function, a new local symbol table is created for that call.</li></ul></li><li>thus, <strong>arguments</strong> are passed using call by value (<strong>where the value is always an object reference, not the value of the object</strong>).</li><li>A function definition introduces the function name in the current symbol table. The value of the function name has a type that is recognized by the interpreter as a user-defined function. This value can be assigned to another name which can then also be used as a function. This serves as a general renaming mechanism</li><li>By default, arguments may be passed to a Python function either <strong>by position</strong> or <strong>explicitly by keyword</strong>.</li><li>The <code>default values</code> are evaluated at the point of <strong>function definition</strong> in the defining scope</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">arg=i</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line">i = <span class="number">6</span></span><br><span class="line">f()</span><br><span class="line"><span class="number">5</span> <span class="comment"># output</span></span><br></pre></td></tr></table></figure><ul><li><strong>Important warning: The <code>default value</code> is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls</strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, L=[]</span>):</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>This will print</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>If you don’t want the default to be shared between subsequent calls, you can write the function like this instead:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a, L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(a)</span><br><span class="line">    <span class="keyword">return</span> L</span><br></pre></td></tr></table></figure><ul><li>When a final formal parameter of the form <code>*name</code> is present, it receives a dictionary containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form <code>name</code> which receives a tuple containing the positional arguments beyond the formal parameter list. (<code>name</code> must occur before <code>*name</code>.)</li></ul><h2><span id="classes"> classes</span><a href="#classes" class="header-anchor">#</a></h2><ul><li>Classes provide a means of bundling data and functionality together.</li><li>Each class instance can have <strong><code>attributes</code></strong> attached to it for <code>maintaining</code> its <strong>state</strong>.</li><li>Class instances can also have <code>methods</code> (defined by its class) for <code>modifying</code> its state.</li><li>In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful</li><li>The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods</li><li>Class objects support two kinds of <strong>operations</strong>: <strong>attribute references</strong> and <strong>instantiation</strong>.<ul><li><strong>Attribute references</strong> use the standard syntax used for all attribute references in Python: <code>obj.name</code>. Valid attribute names are all the names that were in the class’s namespace when the class object was created.<ul><li><code>__doc__</code> is also a valid attribute, returning the docstring belonging to the class</li></ul></li><li><strong>A method is a function that “belongs to” an object.</strong><ul><li>(In Python, the term method is not unique to class instances: other object types can have methods as well. For example, list objects have methods called append, insert, remove, sort, and so on.</li></ul></li></ul></li><li>In fact, nothing in Python makes it possible to enforce data hiding — it is all based upon convention.<ul><li>(On the other hand, the Python implementation, written in C, can completely hide implementation details and control access to an object if necessary; this can be used by extensions to Python written in C.)</li></ul></li></ul><h2><span id="modules"> Modules</span><a href="#modules" class="header-anchor">#</a></h2><blockquote><p>An object that serves as an organizational unit of Python code. Modules have a namespace containing arbitrary Python objects. Modules are loaded into Python by the process of importing. (<a href="https://docs.python.org/glossary.html#term-module">Source</a>)</p></blockquote><ul><li><strong>In practice, a module usually corresponds to one <code>.py</code> file containing Python code.</strong></li><li><strong>The true power of modules is that they can be imported and reused in other code.</strong></li><li>Within a module, the module’s name (as a string) is available as the value of the global variable <code>__name__</code>.</li><li>A module can contain <code>executable statements</code> as well as <strong>function definitions.</strong> These statements are <strong>intended to</strong> <code>initialize the module</code>. They are executed only the first time the module name is encountered in an import statement. (They are also run if the file is executed as a script.)</li><li>Each module has its own <strong>private symbol table</strong>, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, <code>modname.itemname</code>.</li><li>For efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change your modules, you must restart the interpreter – or, if it’s just one module you want to test interactively, use <code>importlib.reload()</code>, e.g. <code>import importlib; importlib.reload(modulename)</code>.</li><li>When a module named <code>spam</code> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <a href="http://spam.py">spam.py</a> in a list of directories given by the variable <code>sys.path</code>. <code>sys.path</code> is initialized from these locations:</li><li>After initialization, Python programs can modify <code>sys.path</code>. The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended.</li><li>The built-in function <code>dir()</code> is used to find out which names a module defines <code>dir(foo)</code>. Without arguments, <code>dir()</code> lists the names you have defined currently:</li><li><code>dir()</code> does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module <code>builtins</code>:</li></ul><h2><span id="packages"> packages</span><a href="#packages" class="header-anchor">#</a></h2><blockquote><p>A Python module which can contain submodules or recursively, subpackages. Technically, a package <strong>is a Python module with an <code>__path__</code> attribute</strong>.</p></blockquote><ul><li>Note that a package is still a module. As a user, you usually don’t need to worry about whether you’re importing a module or a package.</li><li>In practice, a package typically corresponds to a file directory containing Python files and other directories. To create a Python package yourself, you create a directory and a <a href="https://docs.python.org/reference/import.html#regular-packages">file named <code>__init__.py</code></a> inside it. The <code>__init__.py</code> file contains the contents of the package when it’s treated as a module. It can be left empty.</li><li>The <code>__init__.py</code> files are required to make Python treat directories containing the file as packages. This prevents directories with a common name, such as string, unintentionally hiding valid modules that occur later on the module search path. In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</li><li>Note that when using <code>from package import item</code>, the <code>item</code> can be either a <code>submodule (or subpackage)</code> of the package, or some other name defined in the package, like a function, class or variable.<ul><li>The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an <code>ImportError</code> exception is raised.</li><li>Contrarily, when using syntax like <code>import item.subitem.subsubitem</code>, each item except for the last must be a package; the last item can be a module or a package but can’t be a class or function or variable defined in the previous item.</li></ul></li></ul><h2><span id="input-and-output"> Input and Output</span><a href="#input-and-output" class="header-anchor">#</a></h2><ul><li>It is good practice to use the <code>with</code> keyword when dealing with file objects. The advantage is that the file is properly closed after its suite finishes, even if an exception is raised at some point. Using with is also much shorter than writing equivalent try-finally blocks:</li><li>For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">...</span><br><span class="line">This <span class="keyword">is</span> the first line of the file.</span><br><span class="line">Second line of the file</span><br></pre></td></tr></table></figure><ul><li>If you want to read all the lines of a file in a list you can also use <code>list(f)</code> or <code>f.readlines()</code>.</li><li><code>f.write(string)</code> writes the contents of string to the file, returning the number of characters written.</li><li>Contrary to <code>JSON</code>, <code>pickle</code> is a protocol which allows the serialization of arbitrarily complex Python objects. As such, it is specific to Python and cannot be used to communicate with applications written in other languages. It is also insecure by default: deserializing pickle data coming from an untrusted source can execute arbitrary code, if the data was crafted by a skilled attacker.</li></ul><h2><span id="looping-techniques"> Looping Techniques</span><a href="#looping-techniques" class="header-anchor">#</a></h2><ul><li>When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the <code>items()</code> method.</li><li>When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the <code>enumerate()</code> function.</li><li>To loop over two or more sequences at the same time, the entries can be paired with the <code>zip()</code> function.</li><li>To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the <code>reversed()</code> function.</li><li>To loop over a sequence in sorted order, use the <code>sorted()</code> function which returns a new sorted list while leaving the source unaltered.</li><li>The <code>for</code> statement calls <code>iter()</code> on the container object. The function returns an iterator object that defines the method <code>__next__()</code> which accesses elements in the container one at a time. When there are no more elements, <code>__next__()</code> raises a <code>StopIteration</code> exception which tells the for loop to terminate. You can call the <code>__next__()</code> method using the <code>next()</code> built-in function;</li><li>Define an <code>__iter__()</code> method which returns an object with a <code>__next__()</code> method. If the class defines <code>__next__()</code>, then <code>__iter__()</code> can just return self:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Reverse</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Iterator for looping over a sequence backwards.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.data = data</span><br><span class="line">        <span class="variable language_">self</span>.index = <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="variable language_">self</span>.index = <span class="variable language_">self</span>.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.data[<span class="variable language_">self</span>.index]</span><br></pre></td></tr></table></figure><h2><span id="data-struture"> Data Struture</span><a href="#data-struture" class="header-anchor">#</a></h2><ul><li><p><code>list.entend()</code></p></li><li><p>Though <code>tuple</code>s may seem similar to <code>list</code>s, they are often used in different situations and for different purposes.</p><ul><li><code>tuple</code>s are immutable, and usually contain a <strong>heterogeneous</strong> sequence of elements that are accessed via unpacking or indexing (or even by attribute in the case of namedtuples).</li><li><code>list</code>s are mutable, and their elements are usually homogeneous and are accessed by iterating over the list.</li></ul></li><li><p>Empty <code>tuples</code> are constructed by an empty pair of parentheses;</p></li><li><p>a <code>tuple</code> with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective.</p></li><li><p>A <code>set</code> is an unordered collection with no duplicate elements.</p><ul><li>Basic uses include membership testing and eliminating duplicate entries.</li><li>Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.</li></ul></li><li><p>Curly braces or the <code>set()</code> function can be used to create sets.</p><ul><li>Note: to create an empty set you have to use <code>set()</code>, not <code>&#123;&#125;</code>; the latter creates an empty dictionary</li></ul></li><li><p>Similarly to list comprehensions, set comprehensions are also supported:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>dictionaries are indexed by keys, which can be any <strong>immutable</strong> type;</p><ul><li>strings and numbers can always be keys.</li><li>Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key.</li><li><strong>You can’t use lists as keys</strong>, since lists can be modified in place using index assignments, slice assignments, or methods like <code>append()</code> and <code>extend()</code>.</li></ul></li><li><p>The main operations on a dictionary are storing a value with some key and extracting the value given the key.</p></li><li><p>It is also possible to delete a <strong>key:value</strong> pair with <code>del</code>.</p></li><li><p>dict comprehensions can be used to create dictionaries from arbitrary key and value expressions</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br></pre></td></tr></table></figure><ul><li>Lists might contain items of different types, but usually the items all have the same type.</li><li>All slice operations return a <strong>new list</strong> containing the requested elements.</li><li>Lists also support operations like concatenation: Unlike strings, which are immutable, lists are a <strong>mutable type</strong>, i.e. it is possible to change their content:</li><li>You can also add new <strong>items</strong> at the end of the list, by using the <code>append()</code> method</li><li>Assignment to slices is also possible, and this can <strong>even change the size of the list or clear it entirely</strong>:</li><li>The built-in function <code>len()</code> also applies to lists:</li><li>It is possible to nest lists (create lists containing other lists)</li></ul><h2><span id="conditions"> Conditions</span><a href="#conditions" class="header-anchor">#</a></h2><ul><li><code>in</code> and <code>not in</code> check whether a value occurs (does not occur) in a sequence.</li><li>The operators <code>is</code> and <code>is not</code> compare whether two objects are really the <strong>same object</strong>; this only matters for mutable objects like lists.</li><li>All comparison operators have the same priority, which is lower than that of all numerical operators.</li><li>(<code>not and or</code>) have lower priorities than comparison operators; between them, <code>not</code> has the highest priority and <code>or</code> the lowest, so that <code>A and not B or C</code> is equivalent to <code>(A and (not B)) or C</code>.</li><li>The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined.</li></ul><h2><span id="strings"> Strings</span><a href="#strings" class="header-anchor">#</a></h2><ul><li>Strings can be concatenated (glued together) with the <code>+</code> operator, and repeated with <code>*</code>，</li><li>Two or more string literals next to each other are automatically concatenated.This only works with two <strong>literals</strong> though, not with <strong>variables or expressions</strong>. If you want to concatenate variables or a variable and a literal, use <code>+</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;abc&#x27;</span><span class="string">&#x27;efg&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcefg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str2 = <span class="string">&#x27;efg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 + str2</span><br><span class="line"><span class="string">&#x27;abcefg&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Strings can be indexed (subscripted), with the first character having index 0. <strong>There is no separate character type</strong>; a character is simply a string of size one:</li><li>Indices may also be negative numbers, to start counting from the right:</li><li>Note that since -0 is the same as 0, negative indices start from -1.</li><li>Python strings cannot be changed — they are <strong>immutable</strong>. Therefore, assigning to an indexed position in the string results in an error: If you need a different string, you should create a new one:</li><li>The built-in function <code>len()</code> returns the length of a string:</li></ul><h2><span id="imports"> imports</span><a href="#imports" class="header-anchor">#</a></h2><ul><li>A <strong>Python module</strong> is a file that has a <code>.py</code> extension, and a <strong>Python package</strong> is any folder that has modules inside it</li><li>You can import both packages and modules.</li><li>Importing a package essentially imports the package’s <code>__init__.py</code><br> file as a module</li><li>You can also import specific objects from a package or module.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br></pre></td></tr></table></figure><p><img src="import_demo.png" alt="demo of package import process"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> note </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
